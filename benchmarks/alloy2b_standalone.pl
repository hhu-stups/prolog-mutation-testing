% (c) 2017-2018 Lehrstuhl fuer Softwaretechnik und Programmiersprachen,
% Heinrich Heine Universitaet Duesseldorf
% This software is licenced under EPL 1.0 (http://www.eclipse.org/org/documents/epl-v10.html)

 :- module(alloy2b_standalone,[load_alloy_ast_prolog_file/1,
                    load_alloy_model/1,translate_alloy_model/2,run_tests/0]).

:- use_module(mutation_testing).

:- use_module(library(lists)).
:- use_module(library(plunit)).
:- use_module(library(file_systems)).


:- dynamic singleton_set/1, total_function/1, ordered_signature/1, command_counter/1, extending_signatures/1.
:- volatile singleton_set/1, total_function/1, ordered_signature/1, command_counter/1, extending_signatures/1.

:- meta_predicate map_translate(3,-,-,-).

command_counter(0).

% An automated translation from Alloy to classical B.
% The Alloy abstract syntax tree is translated to an untyped B AST as supported by ProB.
% Afterwards, the untyped AST can be typechecked and loaded by ProB.
% The used positions are from the Alloy parser and thus refer to the Alloy model.

% Usage:
% load_alloy_model/1: input is an Alloy model represented as a Prolog term as provided by the Kotlin translation; the model is translated to an untyped B AST and loaded by ProB
% translate_alloy_model/2: input is an Alloy model represented as a Prolog term as provided by the Kotlin translation, output is an untyped B AST

load_alloy_ast_prolog_file(File) :-
    \+ file_exists(File,read) , ! ,
    add_error(load_alloy_ast_prolog_file,'Alloy AST file has not been created:',[File]) , fail.
load_alloy_ast_prolog_file(File) :-
    format('Opening Alloy AST file: ~w~n',[File]) ,
    open(File,read,Stream) ,
    read(Stream,AlloyTerm) ,
    close(Stream) ,
    load_alloy_model(AlloyTerm).

% TODO: use atelierb_pp_mode (e.g. we use let expressions which are not supported by native B)
translate_alloy_model(alloy_model(facts(Facts),assertions(Assertions),commands(Commands),functions(Functions),signatures(Signatures)),UntypedBAst) :-
    % singleton sets are asserted at runtime using singleton_set/1
    % accumulate all translations, afterwards we build the untyped machine ast
    retract_state, % in case things not properly reseted or initialised
    empty_machine_acc(MAcc) ,
    map_translate(translate_signature,MAcc,Signatures,MAcc1) ,
    map_translate(translate_assertion,MAcc1,Assertions,MAcc2) ,
    % TO DO: extract common scopes for all commands, to set deferred set sizes:
    extract_common_scopes(Commands,_GS,_ES,_Con), 
    map_translate(translate_command,MAcc2,Commands,MAcc3) ,
    map_translate(translate_function,MAcc3,Functions,MAcc4) ,
    map_translate(translate_fact,MAcc4,Facts,MAcc5) , ! ,
    finalize_extending_signatures(MAcc5,MAcc6) ,
    build_machine_ast(MAcc6,UntypedBAst) ,
    retract_state.

map_translate(_,MAcc,[],MAcc).
map_translate(TypePred,MAcc,[Part|T],Res) :-
    call(TypePred,MAcc,Part,NewMAcc) ,
    map_translate(TypePred,NewMAcc,T,Res).

translate_signature(MAcc,signature(Name,Fields,Facts,Options,pos(Col,Row)),NewMAcc) :-
    % assert signatures for singleton checks
    assert_singleton_set(Options,Name) ,
    extend_machine_acc(signatures,MAcc,[Name],MAcc1) ,
    translate_signature_aux(Name,Options,pos(Col,Row),MAcc1,MAcc2) ,
    translate_signature_fields(MAcc2,Name,Fields,MAcc3) ,
    translate_e_p(Name,TName) ,
    map_translate(translate_signature_fact(TName),MAcc3,Facts,NewMAcc).

translate_signature_aux(Name,Options,Pos,MAcc,NewMAcc) :-
    % ordered signatures are defined as distinct sets of integer when translating a command
    member(ordered,Options) , ! ,
    asserta(ordered_signature(Name)) ,
    define_ordered_signature_functions(Pos,MAcc,Name,MAcc1) ,
    extend_machine_acc(signatures,MAcc1,[Name],MAcc2) ,
    extend_machine_acc(properties,MAcc2,member(none,identifier(none,Name),pow_subset(none,integer_set(none))),MAcc3) ,
    define_sig_as_set_or_constant_aux(constants,MAcc3,Name,Options,Pos,NewMAcc).
translate_signature_aux(Name,Options,Pos,MAcc,NewMAcc) :-
    define_sig_as_set_or_constant(MAcc,Name,Options,Pos,NewMAcc).

define_ordered_signature_functions(pos(Col,Row),MAcc,Name,NewMAcc) :-
    TPos = pos(0,0,Row,Col,0,0) , TIDX = identifier(TPos,x) ,  TIDS = identifier(TPos,s) ,
    translate_e_p(Name,TName) ,  MemberX = member(TPos,TIDX,TName) ,
    % next_Sig(s)  == {x|x=s+1 & x:Sig}
    atom_concat(next_,Name,NextName) ,
    NextBody = conjunct(TPos,equal(TPos,TIDX,add(TPos,TIDS,integer(TPos,1))),MemberX) ,
    extend_machine_acc(definitions,MAcc,expression_definition(TPos,NextName,[TIDS],comprehension_set(TPos,[TIDX],NextBody)),MAcc1) ,
    % nexts_Sig(s) == {x|x>s & x:Sig}
    atom_concat(nexts_,Name,NextsName) ,
    NextsBody = conjunct(TPos,greater(TPos,TIDX,TIDS),MemberX) ,
    extend_machine_acc(definitions,MAcc1,expression_definition(TPos,NextsName,[TIDS],comprehension_set(TPos,[TIDX],NextsBody)),MAcc2) ,
    atom_concat(prev_,Name,PrevName) ,
    % prev_Sig(s)  == {x|x=s-1 & x:Sig}
    PrevBody = conjunct(TPos,equal(TPos,TIDX,minus(TPos,TIDS,integer(TPos,1))),MemberX) ,
    extend_machine_acc(definitions,MAcc2,expression_definition(TPos,PrevName,[TIDS],comprehension_set(TPos,[TIDX],PrevBody)),MAcc3) ,
    % prevs_Sig(s) == {x|x<s & x:Sig}
    atom_concat(prevs_,Name,PrevsName) ,
    PrevsBody = conjunct(TPos,less(TPos,TIDX,TIDS),MemberX) ,
    extend_machine_acc(definitions,MAcc3,expression_definition(TPos,PrevsName,[TIDS],comprehension_set(TPos,[TIDX],PrevsBody)),NewMAcc).

translate_signature_fields(MAcc,SignatureName,Fields,NewMAcc) :-
    translate_e_p(SignatureName,TSignatureName) ,
    translate_signature_fields_aux(MAcc,TSignatureName,Fields,NewMAcc).

translate_signature_fields_aux(MAcc,_,[],MAcc).
translate_signature_fields_aux(MAcc,TSignatureName,[Field|T],NewMAcc) :-
    translate_signature_field(TSignatureName,MAcc,Field,MAcc1) ,
    translate_signature_fields_aux(MAcc1,TSignatureName,T,NewMAcc).

translate_signature_field(TSignatureName,MAcc,Field,NewMAcc) :-
    translate_signature_field_aux(TSignatureName,MAcc,Field,TField,MAcc1) ,
    extend_machine_acc(properties,MAcc1,TField,NewMAcc).

translate_signature_field_aux(TSignatureName,MAcc,field(FieldName,Expr,type(_Type,_Arity),Options,pos(Col,Row)),TField,NewMAcc) :-
    translate_e_p(FieldName,TFieldName) ,
    extend_machine_acc(constants,MAcc,TFieldName,MAcc1) ,
    disjoint_field_declaration(TSignatureName,pos(0,0,Row,Col,0,0),Options,MAcc1,TFieldName,NewMAcc) ,
    field_decl_special_cases(pos(0,0,Row,Col,0,0),TSignatureName,Expr,TFieldName,TField) , !.

translate_function_field(Functor,field(FieldName,Expr,type(_Type,_Arity),_Options,pos(Col,Row)),TField,FieldName) :-
    (Functor = function -> assert_singleton_set(FieldName) ; true) ,
    translate_e_p(FieldName,TFieldName) ,
    fun_or_pred_decl_special_cases(pos(0,0,Row,Col,0,0),Expr,TFieldName,TField) , !.

translate_quantifier_field(field(FieldName,Expr,type(_Type,_Arity),_Options,pos(Col,Row)),TField,FieldName) :-
    assert_singleton_set(FieldName) ,
    translate_e_p(FieldName,TFieldName) ,
    fun_or_pred_decl_special_cases(pos(0,0,Row,Col,0,0),Expr,TFieldName,TField) , !.

disjoint_field_declaration(TSignatureName,TPos,Options,MAcc,TFieldName,NewMAcc) :-
    member(disj,Options) , ! ,
    % all a, b: S | a != b implies no a.f & b.f
    IdA = identifier(TPos,a) , IdB = identifier(TPos,b) ,
    ImplLhs = conjunct(TPos,conjunct(TPos,member(TPos,IdA,TSignatureName),member(TPos,IdB,TSignatureName)),not_equal(TPos,IdA,IdB)) ,
    ImplRhs = equal(TPos,intersection(TPos,image(TPos,TFieldName,set_extension(none,[IdA])),image(TPos,TFieldName,set_extension(none,[IdB]))),empty_set(TPos)) ,
    Disjoint = forall(TPos,[IdA,IdB],implication(TPos,ImplLhs,ImplRhs)) ,
    extend_machine_acc(properties,MAcc,Disjoint,NewMAcc).
disjoint_field_declaration(_,_,_,MAcc,_,MAcc).

translate_fact(MAcc,fact(Expr,_Pos),NewMAcc) :-
    translate_e_p(Expr,TExpr) ,
    extend_machine_acc(properties,MAcc,TExpr,NewMAcc).

% Signature facts: Identifiers may refer to the signature and are joined with 'this'.
% We then need a universal quantification using 'this'.
translate_signature_fact(TSignatureName,MAcc,Expr,NewMAcc) :-
    translate_e_p(Expr,TExpr) ,
    alloy_expr_contains_join_with_this(Expr) ,
    ThisID = identifier(none,'this') ,
    TImplication = implication(none,subset(none,set_extension(none,[ThisID]),TSignatureName),TExpr) ,
    extend_machine_acc(properties,MAcc,forall(none,[ThisID],TImplication),NewMAcc).
translate_signature_fact(_TSignatureName,MAcc,Expr,NewMAcc) :-
    translate_e_p(Expr,TExpr) ,
    extend_machine_acc(properties,MAcc,TExpr,NewMAcc).

alloy_expr_contains_join_with_this(AndOr) :-
    AndOr =.. [Functor,ListOfAsts,_Pos] ,
    member(Functor,[and,or]) ,
    findall(Ast,(member(Ast,ListOfAsts) , alloy_expr_contains_join_with_this(Ast)),Temp) ,
    length(Temp,LTemp) , ! , LTemp > 0.
alloy_expr_contains_join_with_this(join(Arg1,Arg2,_Type,_Pos)) :-
    Arg1 = identifier('this',_,_) ; Arg2 = identifier('this',_,_).
alloy_expr_contains_join_with_this(Expr) :-
    Expr =.. [_Functor,Arg1,Arg2,_Type,_Pos] ,
    (alloy_expr_contains_join_with_this(Arg1) ;
     alloy_expr_contains_join_with_this(Arg2)).
alloy_expr_contains_join_with_this(Expr) :-
    Expr =.. [_Functor,Arg,_Type,_Pos] ,
    alloy_expr_contains_join_with_this(Arg).

translate_function(MAcc,FunctionOrPredicate,NewMAcc) :-
    FunctionOrPredicate =.. [Functor,Name,Params,Decls,Body,pos(Col,Row)] ,
    alloy_to_b_operator(Functor,BFunctor) ,
    maplist(translate_e_p,Params,TParams) ,
    maplist(translate_function_field(Functor),Decls,TDecls,SingletonSetNames) ,
    translate_e_p(Body,TBody) ,
    (Functor = function
    ->  append(TDecls,[member(none,identifier(none,'temp'),TBody)],BehaviorList) ,
        join_untyped_ast_nodes(conjunct,BehaviorList,Behavior) ,
        UAst =.. [BFunctor,pos(0,0,Row,Col,0,0),Name,TParams,comprehension_set(pos(0,0,Row,Col,0,0),[identifier(none,'temp')],Behavior)]
    ;   append(TDecls,[TBody],BehaviorList) ,
        join_untyped_ast_nodes(conjunct,BehaviorList,Behavior) ,
        UAst =.. [BFunctor,pos(0,0,Row,Col,0,0),Name,TParams,Behavior]) ,
    extend_machine_acc(definitions,MAcc,UAst,NewMAcc) ,
    maplist(retract_singleton_set,SingletonSetNames).

translate_assertion(MAcc,Assertion,NewMAcc) :-
    translate_fact(MAcc,Assertion,NewMAcc).

% extract scopes common to all commands
extract_common_scopes([Cmd|T],GlobalScopes,ExactScopes,Conflicts) :-
    get_scopes(Cmd,GlobalScopes1,ExactScopes1),!,
    extract_common_aux(T,GlobalScopes1,ExactScopes1,[],GlobalScopes,ExactScopes,Conflicts).
extract_common_scopes(_,-1,[],[]).
extract_common_aux([],G,E,C,G,E,C).
extract_common_aux([Cmd|T],GlobalScope0,ExactScopes0,Conflicts0,
                           GlobalScopes,ExactScopes,Conflicts) :-
    get_scopes(Cmd,GlobalScope1,ExactScopes1),
    (GlobalScope0=GlobalScope1 -> GlobalScope2 = GlobalScope0 ; GlobalScope2=none),
    join_exact_scopes(ExactScopes0,ExactScopes1,ExactScopes2,Conflicts1),
    ord_union(Conflicts0,Conflicts1,Conflicts2),
    !,
    extract_common_aux(T,GlobalScope2,ExactScopes2,Conflicts2,GlobalScopes,ExactScopes,Conflicts).

:- use_module(library(ordsets),[ord_intersection/3, ord_union/3, ord_subtract/3]).
join_exact_scopes(S1,S2,Inter,Conflicts) :-
   sort(S1,SS1), sort(S2,SS2), ord_intersection(SS1,SS2,Inter),
   ord_union(SS1,SS2,Union),
   ord_subtract(Union,Inter,Conflicts).

get_scopes(Command,GlobalScope,ExactScopes) :-
    Command =.. [_Functor,_Body,global_scope(GlobalScope),exact_scopes(ExactScopes),_BitWidth,_].

translate_command(MAcc,Command,NewMAcc) :-
    Command =.. [Functor,Body,GlobalScope,ExactScopes,BitWidth,pos(Col,Row)] ,
    (Functor = check ; Functor = run) ,
    translate_e_p(Body,TBody) ,
    % we need all signature names to define the global scope
    get_signature_names_from_machine_acc(MAcc,SignatureNames) ,
    translate_scopes(SignatureNames,GlobalScope,ExactScopes,BitWidth,TScopesPred) ,
    TPos = pos(0,0,Row,Col,0,0) ,
    Precondition = conjunct(TPos,TScopesPred,TBody) ,
    get_command_counter_atom(CommandCounter) ,
    atom_concat(Functor,CommandCounter,OperationName) ,
    Operation = operation(TPos,identifier(TPos,OperationName),[],[],precondition(TPos,Precondition,skip(none))) ,
    extend_machine_acc(operations,MAcc,Operation,NewMAcc).

% global scope, exact scopes and bitwidth
% We do not need to set the bitwidth since we have real integers in B.
% Note: If only one command is defined in the Alloy model we could set min and max int of ProB in the definitions.
translate_scopes(SignatureNames,global_scope(GlobalScope),exact_scopes(ExactScopes),_BitWidth,conjunct(none,TExactScopes,TGlobalScopes)) :-
    % translate exact scopes first
    translate_exact_scopes(0,ExactScopes,ExactSignatureNames,TExactScopes,OrderedSignatureCounter) ,
    % if present, define the global scope for the remaining signatures
    translate_global_scope(OrderedSignatureCounter,GlobalScope,SignatureNames,ExactSignatureNames,TGlobalScopes,_).

% no exact scopes defined
translate_exact_scopes(OrderedSignatureCounter,[],ExactSignatureNames,truth(none),OrderedSignatureCounter) :- !,
    ExactSignatureNames=[].
translate_exact_scopes(OrderedSignatureCounter,ExactScopes,ExactSignatureNames,
                       TExactScopes,NewOrderedSignatureCounter) :-
    translate_exact_scopes_aux(OrderedSignatureCounter,ExactScopes,[],
                                ExactSignatureNames,[],TempTExactScopes,NewOrderedSignatureCounter) ,
    join_predicates(conjunct,TempTExactScopes,TExactScopes).

translate_exact_scopes_aux(OrderedSignatureCounter,[],NamesAcc,NamesAcc,TScopeAcc,TScopeAcc,OrderedSignatureCounter).
translate_exact_scopes_aux(OrderedSignatureCounter,[(SignatureName,Scope)|T],
           NameAcc,ExactSignatureNames,TScopeAcc,TempTExactScopes,NewOrderedSignatureCounter) :-
    is_ordered_signature(SignatureName) , ! ,
    define_ordered_signature_as_integer_set(OrderedSignatureCounter,SignatureName,Scope,
                                           TScope,TNewOrderedSignatureCounter) ,
    translate_exact_scopes_aux(TNewOrderedSignatureCounter,T,[SignatureName|NameAcc],
                               ExactSignatureNames,[TScope|TScopeAcc],TempTExactScopes,NewOrderedSignatureCounter).
translate_exact_scopes_aux(OrderedSignatureCounter,[(SignatureName,Scope)|T],
                          NameAcc,ExactSignatureNames,TScopeAcc,TempTExactScopes,NewOrderedSignatureCounter) :-
    translate_e_p(SignatureName,TSignatureName) ,
    TScope = equal(none,card(none,TSignatureName),integer(none,Scope)) ,
    translate_exact_scopes_aux(OrderedSignatureCounter,T,[SignatureName|NameAcc],
                               ExactSignatureNames,[TScope|TScopeAcc],TempTExactScopes,NewOrderedSignatureCounter).

define_ordered_signatures_as_integer_set(OrderedSignatureCounter,[],_,[],OrderedSignatureCounter).
define_ordered_signatures_as_integer_set(OrderedSignatureCounter,[TSignatureName|T],Scope,[TScope|TScopes],NewOrderedSignatureCounter) :-
    define_ordered_signature_as_integer_set(OrderedSignatureCounter,TSignatureName,Scope,TScope,TNewOrderedSignatureCounter) ,
    define_ordered_signatures_as_integer_set(TNewOrderedSignatureCounter,T,Scope,TScopes,NewOrderedSignatureCounter).

define_ordered_signature_as_integer_set(OrderedSignatureCounter,TSignatureName,Scope,TScope,NewOrderedSignatureCounter) :-
    NewOrderedSignatureCounter is OrderedSignatureCounter + Scope ,
    NewOrderedSignatureCounter1 is NewOrderedSignatureCounter - 1 ,
    TScope = equal(none,identifier(none,TSignatureName),interval(none,integer(none,OrderedSignatureCounter),integer(none,NewOrderedSignatureCounter1))).

translate_global_scope(OrderedSignatureCounter,-1,_,_,truth(none),OrderedSignatureCounter) :- !. % no global scope defined
translate_global_scope(OrderedSignatureCounter,GlobalScope,SignatureNames,ExactSignatureNames,TGlobalScopes,NewOrderedSignatureCounter) :-
    findall(SignatureName,(member(SignatureName,SignatureNames) ,
                           \+member(SignatureName,ExactSignatureNames) ,
                           is_ordered_signature(SignatureName)),OrderedSignatureNames) ,
    findall(SignatureName,(member(SignatureName,SignatureNames) ,
                           \+member(SignatureName,ExactSignatureNames) ,
                           \+is_ordered_signature(SignatureName)),RestSignatureNames) ,
    translate_global_scope_aux(RestSignatureNames,GlobalScope,[],TempTGlobalScopes) ,
    join_predicates(conjunct,TempTGlobalScopes,TTGlobalScopes) ,
    define_ordered_signatures_as_integer_set(OrderedSignatureCounter,OrderedSignatureNames,GlobalScope,TOrderedScopes,NewOrderedSignatureCounter) ,
    join_predicates(conjunct,[TTGlobalScopes|TOrderedScopes],TGlobalScopes).

translate_global_scope_aux([],_,Acc,Acc).
translate_global_scope_aux([SignatureName|T],GlobalScope,Acc,TGlobalScopes) :-
    translate_e_p(SignatureName,TSignatureName) ,
    TScope = less_equal(none,card(none,TSignatureName),integer(none,GlobalScope)) ,
    translate_global_scope_aux(T,GlobalScope,[TScope|Acc],TGlobalScopes).

% signature in (subset)
define_sig_as_set_or_constant(MAcc,Name,Options,pos(Col,Row),NewMAcc) :-
    memberchk(subset(Parents),Options) , ! ,
    % maplist(assert_extending_signature(Name),Parents) , % subset signatures do not need to be distinct
    define_sig_as_set_or_constant_aux(constants,MAcc,Name,Options,pos(Col,Row),MAcc1) ,
    % TODO: consider several parents -> we need the universe type
    Parents = [Parent|_] ,
    translate_e_p(Name,TName) ,
    translate_e_p(Parent,TParent) ,
    TNode = subset(pos(0,0,Row,Col,0,0),TName,TParent) ,
    extend_machine_acc(properties,MAcc1,TNode,NewMAcc).
% signature extends
define_sig_as_set_or_constant(MAcc,Name,Options,pos(Col,Row),NewMAcc) :-
    member(subsig(Parent),Options) , ! ,
    assert_extending_signature(Name,Parent) ,
    define_sig_as_set_or_constant_aux(constants,MAcc,Name,Options,pos(Col,Row),MAcc1) ,
    translate_e_p(Name,TName) ,
    translate_e_p(Parent,TParent) ,
    TNode = subset(pos(0,0,Row,Col,0,0),TName,TParent) ,
    extend_machine_acc(properties,MAcc1,TNode,NewMAcc).
% default signature
define_sig_as_set_or_constant(MAcc,Name,Options,Pos,NewMAcc) :-
    define_sig_as_set_or_constant_aux(sets,MAcc,Name,Options,Pos,NewMAcc).

define_sig_as_set_or_constant_aux(sets,MAcc,Name,_Options,pos(Col,Row),NewMAcc) :-
    % use deferred_set/2 instead of identifier/2 like for constants
    extend_machine_acc(sets,MAcc,deferred_set(pos(0,0,Row,Col,0,0),Name),NewMAcc).
define_sig_as_set_or_constant_aux(constants,MAcc,Name,_Options,pos(Col,Row),NewMAcc) :-
    extend_machine_acc(constants,MAcc,identifier(pos(0,0,Row,Col,0,0),Name),NewMAcc).

translate_e_p(A,TA) :-
    translate_quantifier_e(A,TA) , !.
translate_e_p(A,TA) :-
    translate_cst_e_p(A,TA) , !.
translate_e_p(A,TA) :-
    translate_unary_e_p(A,TA) , !.
translate_e_p(A,TA) :-
    translate_binary_e_p(A,TA) , !.
translate_e_p(A,TA) :-
    translate_if_then_else(A,TA).
translate_e_p(A,_) :-
    format('Translation failed for ~w.~n',[A]).

translate_if_then_else(if_then_else(ConditionPred,TruthExpr,FalsityExpr,_Type,pos(Col,Row)),TIfThenElse) :-
    translate_e_p(ConditionPred,TConditionPred) ,
    translate_e_p(TruthExpr,TTruthExpr) ,
    translate_e_p(FalsityExpr,TFalsityExpr) ,
    TIfThenElse = conjunct(pos(0,0,Row,Col,0,0),
        implication(pos(0,0,Row,Col,0,0),TConditionPred,TTruthExpr),
        implication(pos(0,0,Row,Col,0,0),negation(pos(0,0,Row,Col,0,0),TConditionPred),TFalsityExpr)).

translate_quantifier_e(Quantifier,TQuantifier) :-
    Quantifier =.. [Functor,Params,Fields,Body,_Type,pos(Col,Row)] ,
    member(Functor,[all,no,some,one,lone]) ,
    maplist(translate_e_p,Params,TParams) ,
    maplist(assert_singleton_set,TParams) ,
    maplist(translate_quantifier_field,Fields,TFieldsList,SingletonSetNames) ,
    join_untyped_ast_nodes(conjunct,TFieldsList,TFields) ,
    translate_e_p(Body,TBody) ,
    translate_quantifier_e_aux(pos(0,0,Row,Col,0,0),Functor,TParams,TFields,TBody,TQuantifier) ,
    maplist(retract_singleton_set,Params) ,
    maplist(retract_singleton_set,SingletonSetNames).

translate_quantifier_e_aux(Pos,all,TParams,TFields,TBody,forall(Pos,TParams,implication(none,TFields,TBody))).
translate_quantifier_e_aux(Pos,no,TParams,TFields,TBody,negation(Pos,exists(none,TParams,conjunct(none,TFields,TBody)))).
translate_quantifier_e_aux(Pos,some,TParams,TFields,TBody,exists(Pos,TParams,conjunct(none,TFields,TBody))).
translate_quantifier_e_aux(Pos,one,TParams,TFields,TBody,equal(Pos,card(none,comprehension_set(none,TParams,conjunct(none,TFields,TBody))),integer(none,1))).
translate_quantifier_e_aux(Pos,lone,TParams,TFields,TBody,less_equal(Pos,card(none,comprehension_set(none,TParams,conjunct(none,TFields,TBody))),integer(none,1))).

translate_cst_e_p(iden(pos(Col,Row)),event_b_identity(pos(0,0,Row,Col,0,0))). % has no Span Info !
translate_cst_e_p(this,_) :- print('this not yet translated'),nl.

translate_unary_e_p(Int,integer(none,Int)) :- integer(Int) , !.
translate_unary_e_p(identifier(ID,_Type,pos(Col,Row)),set_extension(pos(0,0,Row,Col,0,0),[identifier(none,ID)])) :-
    is_singleton_set(ID) , !.
translate_unary_e_p(ID,set_extension(none,[identifier(none,ID)])) :-
    is_singleton_set(ID) , !.
translate_unary_e_p(identifier('Int',_Type,pos(Col,Row)),integer_set(pos(0,0,Row,Col,0,0))) :- !.
translate_unary_e_p('Int',integer_set(none)) :- !.
translate_unary_e_p(identifier(ID,_Type,pos(Col,Row)),identifier(pos(0,0,Row,Col,0,0),ID)) :- !.
translate_unary_e_p(ID,identifier(none,ID)) :- atom(ID) , !.
translate_unary_e_p(integer(A,pos(Col,Row)),integer(pos(0,0,Row,Col,0,0),A)) :- !.
translate_unary_e_p(boolean(true,pos(Col,Row)),boolean_true(pos(0,0,Row,Col,0,0))) :- !.
translate_unary_e_p(boolean(false,pos(Col,Row)),boolean_false(pos(0,0,Row,Col,0,0))) :- !.
translate_unary_e_p(UnaryP,TUnaryP) :-
    % and/or defines a list of ast nodes
    UnaryP =.. [Op,ArgList|_] ,
    memberchk(Op,[and,or]) ,
    is_list(ArgList) , ! ,
    maplist(translate_e_p,ArgList,TArgList) ,
    join_predicates(Op,TArgList,TUnaryP).
translate_unary_e_p(UnaryP,TUnaryP) :-
    UnaryP =.. [Op,Arg,_Type,pos(Col,Row)] ,
    member(Op,[no,one,some,lone]) , ! ,
    translate_e_p(Arg,TArg) ,
    translate_quantified_e(pos(0,0,Row,Col,0,0),Op,TArg,TUnaryP).
translate_unary_e_p(UnaryP,TUnaryP) :-
    UnaryP =.. [Op,Arg,_Type,pos(Col,Row)] ,
    translate_e_p(Arg,TArg) ,
    alloy_to_b_operator(Op,BOp) ,
    TUnaryP =.. [BOp,pos(0,0,Row,Col,0,0),TArg].

integer_function_to_b('integer_\'minus',minus).
integer_function_to_b('integer_\'plus',add).
integer_function_to_b('integer_\'div',div).
integer_function_to_b('integer_\'mul',multiplication).
integer_function_to_b('integer_\'rem',modulo).

ordering_function_to_b(type([SignatureName|_],_),OrderingFunctionName,FunctionName) :-
    atom_concat(Prefix,TempFunctionName,OrderingFunctionName) ,
    (Prefix = 'ordering_\'' ; Prefix = SignatureName) ,
    ((TempFunctionName = first , FunctionName = min) ; (TempFunctionName = last , FunctionName = max)) , !.
ordering_function_to_b(type([SignatureName|_],_),OrderingFunctionName,FunctionName) :-
    atom_concat('ordering_\'',TempFunctionName,OrderingFunctionName) ,
    atom_concat(TempFunctionName,'_',TTempFunctionName) ,
    atom_concat(TTempFunctionName,SignatureName,FunctionName).

translate_binary_e_p(join(Arg1,Arg2,_Type,pos(Col,Row)),TBinaryJoin) :- ! ,
    translate_join(pos(0,0,Row,Col,0,0),Arg1,Arg2,TBinaryJoin).
translate_binary_e_p(let(VarName,Expr,Sub,_Type,pos(Col,Row)),let_expression(BPos,[TVarName],equal(BPos,TVarName,TExpr),TSub)) :- ! ,
    translate_e_p(VarName,TVarName) ,
    translate_e_p(Expr,TExpr) ,
    translate_e_p(Sub,TSub) ,
    BPos = pos(0,0,Row,Col,0,0).
translate_binary_e_p(Call,TCall) :-
    Call =.. [Functor,Name,Params,Type,pos(Col,Row)] ,
    (Functor = pred_call ; Functor = fun_call ) , ! ,
    translate_function_call(Name,Params,Type,pos(Col,Row),TCall).
translate_binary_e_p(Binary,TBinary) :-
    Binary =.. [Op,Arg1,Arg2,_Type,pos(Col,Row)] ,
    translate_e_p(Arg1,TArg1) ,
    translate_e_p(Arg2,TArg2) ,
    alloy_to_b_operator(Op,BOp) ,
    TBinary =.. [BOp,pos(0,0,Row,Col,0,0),TArg1,TArg2].

translate_function_call(Name,_Params,type([Type|_],Arity),pos(Col,Row),TCall) :-
    % function calls like stakes/last
    % first and last from util/ordering are translated to min and max since we use sets of integer
    ordering_function_to_b(type([Type|_],Arity),Name,BFunctor) ,
    (BFunctor = max ; BFunctor = min) , ! ,
    % the types of ordering calls have been preprocessed in Kotlin Alloy2Prolog, i.e.,
    % n-ary types have been flattened to the ordered signature name
    Type = SignatureName ,
    translate_e_p(SignatureName,TSignatureName) ,
    TCall =.. [BFunctor,pos(0,0,Row,Col,0,0),TSignatureName].
translate_function_call(Name,Params,_Type,pos(Col,Row),TCall) :-
    % utility functions from integer
    integer_function_to_b(Name,BOp) , ! ,
    maplist(translate_e_p,Params,TParams) ,
    TCall =.. [BOp,pos(0,0,Row,Col,0,0)|TParams].
translate_function_call(Name,[Param],Type,pos(Col,Row),TCall) :-
    % utility functions from ordering like next, nexts
    ordering_function_to_b(Type,Name,BOp) , ! ,
    translate_e_p(Param,TParam) ,
    strip_singleton_set(TParam,TTParam) ,
    % nested function calls from util/ordering like s.next.next need integer parameter
    (TTParam = definition(_,_,_) -> TTTParam = min(pos(0,0,Row,Col,0,0),TTParam) ; TTTParam = TTParam) ,
    TCall = definition(pos(0,0,Row,Col,0,0),BOp,[TTTParam]).
translate_function_call(Name,Params,_Type,pos(Col,Row),TCall) :-
    % predicate and function call
    maplist(translate_e_p,Params,TParams) ,
    maplist(strip_singleton_set,TParams,TTParams) ,
    TCall = definition(pos(0,0,Row,Col,0,0),Name,TTParams).

strip_singleton_set(set_extension(_,[identifier(Pos,Name)]),identifier(Pos,Name)) :- !.
strip_singleton_set(A,A).

% [first,last]._
translate_join(TPos,Arg1,Arg2,image(TPos,TArg2,set_extension(TPos,[TArg1]))) :-
    Arg1 = fun_call(OrderingFunction,_Params,Type,_Pos1) ,
    ordering_function_to_b(Type,OrderingFunction,_BFunction) , ! ,
    translate_e_p(Arg1,TArg1) ,
    translate_e_p(Arg2,TArg2).
% _.[next,nexts,prev,prevs]
translate_join(_TPos,Arg1,Arg2,TJoin) :-
    % set rhs as the parameter of lhs function call
    Arg2 = fun_call(OrderingFunction,_Params,Type,Pos1) ,
    ordering_function_to_b(Type,OrderingFunction,_BFunction) , ! ,
    translate_e_p(fun_call(OrderingFunction,[Arg1],Type,Pos1),TJoin).
% Translation of the dot join operator has several special cases depending on the arity of the arguments.
translate_join(Pos,Arg1,Arg2,TBinaryJoin) :-
    translate_e_p(Arg1,TArg1) ,
    translate_e_p(Arg2,TArg2) ,
    translate_join_aux(Pos,Arg1,Arg2,TArg1,TArg2,TBinaryJoin).

% univ._
translate_join_aux(TPos,identifier('univ',_,_),_Arg2,_TArg1,TArg2,range(TPos,TArg2)).
% _.univ
translate_join_aux(TPos,_Arg1,identifier('univ',_,_),TArg1,_TArg2,domain(TPos,TArg1)).
% unary._
translate_join_aux(Pos,Arg1,Arg2,TArg1,TArg2,TJoin) :-
    % function call if rhs is a total function from util/integer and lhs a unary relation
    is_unary_relation(Arg1) , is_total_function(TArg2) , ! ,
    (is_integer_function(Arg2)
    ->  remove_singleton_set(TArg1,TTArg1) ,
        TJoin = function(Pos,TArg2,[TTArg1])
    ;   TJoin = image(Pos,TArg2,TArg1)).
translate_join_aux(Pos,Arg1,_Arg2,TArg1,TArg2,image(Pos,TArg2,TTArg1)) :-
    is_unary_relation(Arg1) ,
    (is_total_function(TArg1) -> wrap_set_extension(TArg1,TTArg1) ; TTArg1 = TArg1).
% binary.unary
translate_join_aux(Pos,Arg1,Arg2,TArg1,TArg2,function(Pos,reverse(Pos,TArg1),[TTArg2])) :-
    % function call if lhs is a total function and rhs a unary relation
    is_binary_relation(Arg1) , is_unary_relation(Arg2) , is_total_function(TArg1) , ! ,
    remove_singleton_set(TArg2,TTArg2).
translate_join_aux(Pos,Arg1,Arg2,TArg1,TArg2,image(Pos,reverse(Pos,TArg1),TArg2)) :-
    is_binary_relation(Arg1) , is_unary_relation(Arg2).
% binary.binary
translate_join_aux(Pos,Arg1,Arg2,TArg1,TArg2,composition(Pos,TArg1,TArg2)) :-
    is_binary_relation(Arg1) , is_binary_relation(Arg2).
translate_join_aux(Pos,Arg1,Arg2,_TArg1,_TArg2,empty_set(Pos)) :-
    format('~nJoin not supported this way:~nLeft: ~w~nRight: ~w~n',[Arg1,Arg2]).

wrap_set_extension(set_extension(Pos,List),set_extension(Pos,List)) :- !.
wrap_set_extension(Node,set_extension(none,[Node])).

translate_quantified_e(Pos,no,TArg,equal(Pos,TArg,empty_set(none))).
translate_quantified_e(Pos,one,TArg,equal(Pos,card(none,TArg),integer(none,1))).
translate_quantified_e(Pos,some,TArg,greater(Pos,card(none,TArg),integer(none,0))).
translate_quantified_e(Pos,lone,TArg,less_equal(Pos,card(none,TArg),integer(none,1))).

% Field declarations have several special cases depending on the keywords set, one, some or lone.
field_decl_special_cases(Pos,TSignatureName,DeclTerm,TFieldID,TField) :-
    DeclTerm =.. [_,SetID|_] ,
    replace_this_in_signature_field(DeclTerm,NewDeclTerm) ,
    translate_e_p(SetID,TSetID) ,
    field_decl_special_cases_aux(Pos,NewDeclTerm,TSignatureName,TSetID,TFieldID,TField).

field_decl_special_cases_aux(Pos,setof(_,_,_),TSignatureName,TSetID,TFieldID,member(Pos,TFieldID,relations(none,TSignatureName,TSetID))).
field_decl_special_cases_aux(Pos,oneof(_,_,_),TSignatureName,TSetID,TFieldID,member(Pos,TFieldID,total_function(none,TSignatureName,TSetID))) :-
    assert_total_function(TFieldID).
field_decl_special_cases_aux(Pos,loneof(_,_,_),TSignatureName,TSetID,TFieldID,member(Pos,TFieldID,partial_function(none,TSignatureName,TSetID))).
field_decl_special_cases_aux(Pos,Function,_TSignatureName,_TSetID,TFieldID,member(Pos,TFieldID,TFunction)) :-
    translate_e_p(Function,TFunction).
field_decl_special_cases_aux(Pos,Term,_,_,_,_) :-
    format('~nField declaration not implemented: ~w~nPosition ~w~n',[Term,Pos]).

replace_this_in_signature_field(identifier('this',type([[SignatureName]],1),Pos),identifier(SignatureName,type([[SignatureName]],1),Pos)) :- !.
replace_this_in_signature_field(DeclTerm,NewDeclTerm) :-
    DeclTerm =.. [Functor,Arg1,Type,Pos] ,
    replace_this_in_signature_field(Arg1,NArg1) ,
    NewDeclTerm =.. [Functor,NArg1,Type,Pos].
replace_this_in_signature_field(DeclTerm,NewDeclTerm) :-
    DeclTerm =.. [Functor,Arg1,Arg2,Type,Pos] ,
    replace_this_in_signature_field(Arg1,NArg1) ,
    replace_this_in_signature_field(Arg2,NArg2) ,
    NewDeclTerm =.. [Functor,NArg1,NArg2,Type,Pos].
replace_this_in_signature_field(DeclTerm,DeclTerm).

% In function or predicate definitions one can use either set or one.
fun_or_pred_decl_special_cases(Pos,setof(Expr,_,_),TFieldID,subset(Pos,TFieldID,TExpr)) :-
    translate_e_p(Expr,TExpr).
fun_or_pred_decl_special_cases(Pos,oneof(Expr,_,_),TFieldID,subset(Pos,TFieldID,TExpr)) :-
    translate_e_p(Expr,TExpr).
fun_or_pred_decl_special_cases(Pos,identifier(Name,Type,PosID),TFieldID,subset(Pos,TFieldID,TSignatureName)) :-
    translate_e_p(identifier(Name,Type,PosID),TSignatureName).
fun_or_pred_decl_special_cases(_,Term,_,_) :-
    format('~nField declaration for function or predicate not implemented: ~w~n',[Term]).

alloy_to_b_operator(Op,BOp) :-
    alloy_to_b_operator_aux(Op,BOp) , !.

alloy_to_b_operator_aux(in,subset).
alloy_to_b_operator_aux(plus,union).
alloy_to_b_operator_aux(not,negation).
alloy_to_b_operator_aux(or,disjunct).
alloy_to_b_operator_aux(and,conjunct).
alloy_to_b_operator_aux(inverse,reverse).
alloy_to_b_operator_aux(minus,set_subtraction).
alloy_to_b_operator_aux(closure1,closure). % this is transitive and not reflexive_closure
alloy_to_b_operator_aux(closure,reflexive_closure).
alloy_to_b_operator_aux(cartesian,cartesian_product).
alloy_to_b_operator_aux(function,expression_definition).
alloy_to_b_operator_aux(predicate,predicate_definition).
alloy_to_b_operator_aux('!=',not_equal).
alloy_to_b_operator_aux(Op,Op).

%%%
% Accumulate the translated machine parts and signature names during the translation and build the machine AST afterwards.
% We may need the signature names later on if translating a global scope.
build_machine_ast(b_machine(ListOfMachineParts,_SignatureNames),machine(generated(none,AbstractMachine))) :-
    % filter empty machine parts
    findall(MachinePart,(member(MachinePart,ListOfMachineParts) , MachinePart =.. [_,_,L] , L \= []),TempListOfUsedMachineParts) ,
    % properties need to be conjoined
    select(properties(none,L),TempListOfUsedMachineParts,RestListOfUsedMachineParts) ,
    join_predicates(conjunct,L,FlatL) ,
    AbstractMachine = abstract_machine(none,machine(none),machine_header(none,alloytranslation,[]),[properties(none,FlatL)|RestListOfUsedMachineParts]) , !.

empty_machine_acc(b_machine([sets(none,[]),constants(none,[]),definitions(none,[]),properties(none,[]),assertions(none,[]),operations(none,[])],[])).

extend_machine_acc(signatures,b_machine(MachineParts,SignatureNames),New,b_machine(MachineParts,NewSignatureNames)) :-
    append(New,SignatureNames,NewSignatureNames) , !.
extend_machine_acc(Functor,b_machine(MachineParts,SignatureNames),New,b_machine([NewMachinePart|RestMachineParts],SignatureNames)) :-
    MachinePart =.. [Functor,none,List] ,
    select(MachinePart,MachineParts,RestMachineParts) ,
    NewMachinePart =.. [Functor,none,[New|List]], !.
extend_machine_acc(Functor,_,_,_) :-
    add_internal_error('Failed: ',extend_machine_acc(Functor,_,_,_) ),fail.

get_signature_names_from_machine_acc(b_machine(_MachineParts,SignatureNames),SignatureNames).

get_command_counter_atom(CommandCounterAtom) :-
    command_counter(CommandCounter) ,
    number_codes(CommandCounter,CommandCounterCodes) ,
    atom_codes(CommandCounterAtom,CommandCounterCodes) ,
    retractall(command_counter(_)) ,
    NewCommandCounter is CommandCounter + 1 ,
    asserta(command_counter(NewCommandCounter)).

finalize_extending_signatures(MAcc,NewMAcc) :-
    on_exception(_,extending_signatures(List),fail) , ! ,
    finalize_extending_signatures_aux(MAcc,List,NewMAcc).
finalize_extending_signatures(MAcc,MAcc).

finalize_extending_signatures_aux(MAcc,[],MAcc).
finalize_extending_signatures_aux(MAcc,[(Parent,SubSigs)|T],NewMAcc) :-
    length(SubSigs,AmountOfSubSigs) ,
    AmountOfSubSigs > 1 , ! ,
    maplist(translate_e_p,SubSigs,TSubSigs) ,
    translate_e_p(Parent,TParent) ,
    join_untyped_ast_nodes(union,TSubSigs,Union) ,
    % parent = sub1 \/ sub2 \/ ... \/ subN
    extend_machine_acc(properties,MAcc,equal(none,TParent,Union),MAcc1) ,
    % sub1 /= sub2 & sub1 /= sub3 & sub2 /= sub3 & ...
    % TO DO: generate partition() or card() = length, rather than quadratic number of inequalities, or use card
    % currently the generated inequalties are also wrong for CrewAlloc, generating male \= {...} constraints
    findall(Inequality,(nth0(I1,TSubSigs,X) , nth0(I2,TSubSigs,Y) , I1 < I2,
                        Inequality = not_equal(none,X,Y)),
            Inequalities) ,
    join_untyped_ast_nodes(conjunct,Inequalities,DistinctSubSigs) ,
    extend_machine_acc(properties,MAcc1,DistinctSubSigs,MAcc2) ,
    extend_machine_acc(properties,MAcc2,equal(none,card(none,TParent),integer(none,AmountOfSubSigs)),MAcc3) , 
    finalize_extending_signatures_aux(MAcc3,T,NewMAcc).
finalize_extending_signatures_aux(MAcc,[_|T],NewMAcc) :-
    finalize_extending_signatures_aux(MAcc,T,NewMAcc).
%%%

assert_extending_signature(Name,Parent) :-
    on_exception(_,extending_signatures(List),fail) ,
    select((Parent,SubSigs),List,Rest) , ! ,
    (\+ memberchk(Name,SubSigs)
    ->  retractall(extending_signatures(_)) ,
        asserta(extending_signatures([(Parent,[Name|SubSigs])|Rest]))
    ;   true).
assert_extending_signature(Name,Parent) :-
    on_exception(_,extending_signatures(List),fail) , ! ,
    asserta(extending_signatures([(Parent,[Name])|List])).
assert_extending_signature(Name,Parent) :-
    asserta(extending_signatures([(Parent,[Name])])).

assert_singleton_set(Options,Name) :-
    member(one,Options) , ! ,
    assert_singleton_set(Name).
assert_singleton_set(_,_).

assert_singleton_set(Name) :-
    (on_exception(_,singleton_set(Name),fail) ;
     asserta(singleton_set(Name))).
assert_singleton_set(_).

retract_singleton_set(Name) :-
    retractall(singleton_set(Name)).

retract_state :-
    retractall(command_counter(_)) ,
    asserta(command_counter(0)) ,
    retractall(singleton_set(_)) ,
    retractall(ordered_signature(_)) ,
    retractall(total_function(_)) ,
    retractall(extending_signatures(_)) , !.

is_singleton_set(identifier(IDName,_,_)) :-
    is_singleton_set(IDName).
is_singleton_set(IDName) :-
    on_exception(_,singleton_set(IDName),fail).

assert_total_function(identifier(_,Name)) :-
    assert_total_function(Name) , !.
assert_total_function(Name) :-
    asserta(total_function(Name)).

is_total_function(function(_,ID,_)) :-
    is_total_function(ID) , !.
is_total_function(identifier(_,Name)) :-
    is_total_function(Name) , !.
is_total_function(Name) :-
    on_exception(_,total_function(Name),fail).

% TODO: types should be preprocessed in Kotlin
is_integer_function(Node) :-
    Node =.. [_,_,type([Type],2),_] ,
    atom(Type) ,
    atom_codes(Type,L) , append([_,[45,62],B],L) , ! ,
    atom_codes(BB,B) , BB == 'Int'.

is_ordered_signature(IDName) :-
    on_exception(_,ordered_signature(IDName),fail).

is_unary_relation(AlloyTerm) :-
    get_type_and_arity_from_alloy_term(AlloyTerm,_Type,Arity) ,
    Arity == 1.

is_binary_relation(AlloyTerm) :-
    get_type_and_arity_from_alloy_term(AlloyTerm,_Type,Arity) ,
    Arity == 2.

remove_singleton_set(set_extension(_,[identifier(Pos,Name)]),identifier(Pos,Name)).
remove_singleton_set(AST,AST).

get_type_and_arity_from_alloy_term(AlloyTerm,Type,Arity) :-
    AlloyTerm =.. [_|Args] ,
    member(type(Type,Arity),Args) , !.

atom_or_identifier_term(ID,ID) :- atom(ID).
atom_or_identifier_term(identifier(IDName,_,_),IDName).

join_predicates(Op,TArgList,TBinaryP) :-
    alloy_to_b_operator(Op,BOp) ,
    (BOp = conjunct ; BOp = disjunct) ,
    join_untyped_ast_nodes(BOp,TArgList,TBinaryP).

join_untyped_ast_nodes(_,[],truth(none)).
join_untyped_ast_nodes(BOp,[H|T],Conjoined) :-
    join_untyped_ast_nodes(BOp,T,H,Conjoined).

join_untyped_ast_nodes(_,[],Acc,Acc).
join_untyped_ast_nodes(BOp,[H|T],Acc,Conjoined) :-
    NewAcc =.. [BOp,none,H,Acc] ,
    join_untyped_ast_nodes(BOp,T,NewAcc,Conjoined).

atom_concat_safe(A,B,C) :-
    atom(A) , atom(B) ,
    atom_concat(A,B,C).

:- begin_tests(full_machine_translation).

test(cards,[]) :-
    AlloyTerm = alloy_model(facts([]),assertions([]),commands([]),functions([predicate('ThreeOfAKind',[identifier('hand',type([['Card']],1),pos(20,3))],[field('hand',setof(identifier('Card',type([['Card']],1),pos(5,1)),type([['Card']],1),pos(26,3)),type([['Card']],1),[],pos(20,3))],and([equal(card(join(identifier('hand',type([['Card']],1),pos(20,3)),identifier('suit',type([['Card', 'Suit']],2),pos(11,1)),type([['Suit']],1),pos(8,4)),type([['Int']],1),pos(3,4)),integer(1,pos(14,4)),type([untyped],0),pos(13,4)), equal(card(identifier('hand',type([['Card']],1),pos(20,3)),type([['Int']],1),pos(20,4)),integer(3,pos(26,4)),type([untyped],0),pos(25,4))],pos(16,4)),pos(1,3))]),signatures([signature('Card',[field('suit',oneof(identifier('Suit',type([['Suit']],1),pos(5,2)),type([['Suit']],1),pos(16,1)),type([['Suit']],1),[],pos(11,1))],[],[],pos(5,1)),signature('Suit',[],[],[],pos(5,2))])) ,
    translate_alloy_model(AlloyTerm,Translated) , ! , 
    Translated == machine(generated(none,abstract_machine(none,machine(none),machine_header(none,alloytranslation,[]),[properties(none,member(pos(0,0,1,11,0,0),identifier(none,suit),total_function(none,identifier(none,'Card'),identifier(pos(0,0,2,5,0,0),'Suit')))),definitions(none,[predicate_definition(pos(0,0,3,1,0,0),'ThreeOfAKind',[identifier(pos(0,0,3,20,0,0),hand)],conjunct(none,conjunct(none,equal(pos(0,0,4,25,0,0),card(pos(0,0,4,20,0,0),identifier(pos(0,0,3,20,0,0),hand)),integer(pos(0,0,4,26,0,0),3)),equal(pos(0,0,4,13,0,0),card(pos(0,0,4,3,0,0),image(pos(0,0,4,8,0,0),identifier(pos(0,0,1,11,0,0),suit),identifier(pos(0,0,3,20,0,0),hand))),integer(pos(0,0,4,14,0,0),1))),subset(pos(0,0,3,20,0,0),identifier(none,hand),identifier(pos(0,0,1,5,0,0),'Card'))))]),sets(none,[deferred_set(pos(0,0,2,5,0,0),'Suit'),deferred_set(pos(0,0,1,5,0,0),'Card')]),constants(none,[identifier(none,suit)])]))).

test(filesystem,[]) :-
    AlloyTerm = alloy_model(facts([fact(all(['d', 'o'],[field('d',oneof(identifier('Dir',type([['Dir']],1),pos(5,5)),type([['Dir']],1),pos(15,11)),type([['Dir']],1),[],pos(12,11)), field('o',oneof(join(identifier('d',type([['Dir']],1),pos(12,11)),identifier('contents',type([['Dir', 'FSObject']],2),pos(28,5)),type([['FSObject']],1),pos(24,11)),type([['FSObject']],1),pos(23,11)),type([['FSObject']],1),[],pos(20,11))],equal(join(identifier('o',type([['FSObject']],1),pos(20,11)),identifier('parent',type([['FSObject', 'Dir']],2),pos(16,2)),type([['Dir']],1),pos(37,11)),identifier('d',type([['Dir']],1),pos(12,11)),type([untyped],0),pos(45,11)),type([untyped],0),pos(8,11)),(1,11)),fact(equal(plus(identifier('File',type([['File']],1),pos(5,8)),identifier('Dir',type([['Dir']],1),pos(5,5)),type([['File'], ['Dir']],1),pos(13,14)),identifier('FSObject',type([['FSObject']],1),pos(5,2)),type([untyped],0),pos(19,14)),(1,14)),fact(in(identifier('FSObject',type([['FSObject']],1),pos(5,2)),join(identifier('Root',type([['Root']],1),pos(9,17)),closure(identifier('contents',type([['Dir', 'FSObject']],2),pos(28,5)),type([['univ', 'univ']],2),pos(25,20)),type([['univ']],1),pos(24,20)),type([untyped],0),pos(17,20)),(1,20))]),assertions([fact(no(['d'],[field('d',oneof(identifier('Dir',type([['Dir']],1),pos(5,5)),type([['Dir']],1),pos(24,23)),type([['Dir']],1),[],pos(21,23))],in(identifier('d',type([['Dir']],1),pos(21,23)),join(identifier('d',type([['Dir']],1),pos(21,23)),closure1(identifier('contents',type([['Dir', 'FSObject']],2),pos(28,5)),type([['Dir', 'FSObject']],2),pos(37,23)),type([['FSObject']],1),pos(36,23)),type([untyped],0),pos(32,23)),type([untyped],0),pos(18,23)),(1,23)),fact(one(['d'],[field('d',oneof(identifier('Dir',type([['Dir']],1),pos(5,5)),type([['Dir']],1),pos(25,29)),type([['Dir']],1),[],pos(22,29))],no(join(identifier('d',type([['Dir']],1),pos(22,29)),identifier('parent',type([['FSObject', 'Dir']],2),pos(16,2)),type([['Dir']],1),pos(35,29)),type([untyped],0),pos(31,29)),type([untyped],0),pos(18,29)),(1,29)),fact(all(['o'],[field('o',oneof(identifier('FSObject',type([['FSObject']],1),pos(5,2)),type([['FSObject']],1),pos(29,35)),type([['FSObject']],1),[],pos(26,35))],lone(['d'],[field('d',oneof(identifier('Dir',type([['Dir']],1),pos(5,5)),type([['Dir']],1),pos(48,35)),type([['Dir']],1),[],pos(45,35))],in(identifier('o',type([['FSObject']],1),pos(26,35)),join(identifier('d',type([['Dir']],1),pos(45,35)),identifier('contents',type([['Dir', 'FSObject']],2),pos(28,5)),type([['FSObject']],1),pos(60,35)),type([untyped],0),pos(56,35)),type([untyped],0),pos(40,35)),type([untyped],0),pos(22,35)),(1,35))]),commands([check(and([all(['d', 'o'],[field('d',oneof(identifier('Dir',type([['Dir']],1),pos(5,5)),type([['Dir']],1),pos(15,11)),type([['Dir']],1),[],pos(12,11)), field('o',oneof(join(identifier('d',type([['Dir']],1),pos(12,11)),identifier('contents',type([['Dir', 'FSObject']],2),pos(28,5)),type([['FSObject']],1),pos(24,11)),type([['FSObject']],1),pos(23,11)),type([['FSObject']],1),[],pos(20,11))],equal(join(identifier('o',type([['FSObject']],1),pos(20,11)),identifier('parent',type([['FSObject', 'Dir']],2),pos(16,2)),type([['Dir']],1),pos(37,11)),identifier('d',type([['Dir']],1),pos(12,11)),type([untyped],0),pos(45,11)),type([untyped],0),pos(8,11)), equal(plus(identifier('File',type([['File']],1),pos(5,8)),identifier('Dir',type([['Dir']],1),pos(5,5)),type([['File'], ['Dir']],1),pos(13,14)),identifier('FSObject',type([['FSObject']],1),pos(5,2)),type([untyped],0),pos(19,14)), in(identifier('FSObject',type([['FSObject']],1),pos(5,2)),join(identifier('Root',type([['Root']],1),pos(9,17)),closure(identifier('contents',type([['Dir', 'FSObject']],2),pos(28,5)),type([['univ', 'univ']],2),pos(25,20)),type([['univ']],1),pos(24,20)),type([untyped],0),pos(17,20)), not(no(['d'],[field('d',oneof(identifier('Dir',type([['Dir']],1),pos(5,5)),type([['Dir']],1),pos(24,23)),type([['Dir']],1),[],pos(21,23))],in(identifier('d',type([['Dir']],1),pos(21,23)),join(identifier('d',type([['Dir']],1),pos(21,23)),closure1(identifier('contents',type([['Dir', 'FSObject']],2),pos(28,5)),type([['Dir', 'FSObject']],2),pos(37,23)),type([['FSObject']],1),pos(36,23)),type([untyped],0),pos(32,23)),type([untyped],0),pos(18,23)),type([untyped],0),pos(1,23))],pos(1,11)),global_scope(5),exact_scopes([]),bitwidth(-1),pos(1,26)),check(and([all(['d', 'o'],[field('d',oneof(identifier('Dir',type([['Dir']],1),pos(5,5)),type([['Dir']],1),pos(15,11)),type([['Dir']],1),[],pos(12,11)), field('o',oneof(join(identifier('d',type([['Dir']],1),pos(12,11)),identifier('contents',type([['Dir', 'FSObject']],2),pos(28,5)),type([['FSObject']],1),pos(24,11)),type([['FSObject']],1),pos(23,11)),type([['FSObject']],1),[],pos(20,11))],equal(join(identifier('o',type([['FSObject']],1),pos(20,11)),identifier('parent',type([['FSObject', 'Dir']],2),pos(16,2)),type([['Dir']],1),pos(37,11)),identifier('d',type([['Dir']],1),pos(12,11)),type([untyped],0),pos(45,11)),type([untyped],0),pos(8,11)), equal(plus(identifier('File',type([['File']],1),pos(5,8)),identifier('Dir',type([['Dir']],1),pos(5,5)),type([['File'], ['Dir']],1),pos(13,14)),identifier('FSObject',type([['FSObject']],1),pos(5,2)),type([untyped],0),pos(19,14)), in(identifier('FSObject',type([['FSObject']],1),pos(5,2)),join(identifier('Root',type([['Root']],1),pos(9,17)),closure(identifier('contents',type([['Dir', 'FSObject']],2),pos(28,5)),type([['univ', 'univ']],2),pos(25,20)),type([['univ']],1),pos(24,20)),type([untyped],0),pos(17,20)), not(one(['d'],[field('d',oneof(identifier('Dir',type([['Dir']],1),pos(5,5)),type([['Dir']],1),pos(25,29)),type([['Dir']],1),[],pos(22,29))],no(join(identifier('d',type([['Dir']],1),pos(22,29)),identifier('parent',type([['FSObject', 'Dir']],2),pos(16,2)),type([['Dir']],1),pos(35,29)),type([untyped],0),pos(31,29)),type([untyped],0),pos(18,29)),type([untyped],0),pos(1,29))],pos(1,11)),global_scope(5),exact_scopes([]),bitwidth(-1),pos(1,32)),check(and([all(['d', 'o'],[field('d',oneof(identifier('Dir',type([['Dir']],1),pos(5,5)),type([['Dir']],1),pos(15,11)),type([['Dir']],1),[],pos(12,11)), field('o',oneof(join(identifier('d',type([['Dir']],1),pos(12,11)),identifier('contents',type([['Dir', 'FSObject']],2),pos(28,5)),type([['FSObject']],1),pos(24,11)),type([['FSObject']],1),pos(23,11)),type([['FSObject']],1),[],pos(20,11))],equal(join(identifier('o',type([['FSObject']],1),pos(20,11)),identifier('parent',type([['FSObject', 'Dir']],2),pos(16,2)),type([['Dir']],1),pos(37,11)),identifier('d',type([['Dir']],1),pos(12,11)),type([untyped],0),pos(45,11)),type([untyped],0),pos(8,11)), equal(plus(identifier('File',type([['File']],1),pos(5,8)),identifier('Dir',type([['Dir']],1),pos(5,5)),type([['File'], ['Dir']],1),pos(13,14)),identifier('FSObject',type([['FSObject']],1),pos(5,2)),type([untyped],0),pos(19,14)), in(identifier('FSObject',type([['FSObject']],1),pos(5,2)),join(identifier('Root',type([['Root']],1),pos(9,17)),closure(identifier('contents',type([['Dir', 'FSObject']],2),pos(28,5)),type([['univ', 'univ']],2),pos(25,20)),type([['univ']],1),pos(24,20)),type([untyped],0),pos(17,20)), not(all(['o'],[field('o',oneof(identifier('FSObject',type([['FSObject']],1),pos(5,2)),type([['FSObject']],1),pos(29,35)),type([['FSObject']],1),[],pos(26,35))],lone(['d'],[field('d',oneof(identifier('Dir',type([['Dir']],1),pos(5,5)),type([['Dir']],1),pos(48,35)),type([['Dir']],1),[],pos(45,35))],in(identifier('o',type([['FSObject']],1),pos(26,35)),join(identifier('d',type([['Dir']],1),pos(45,35)),identifier('contents',type([['Dir', 'FSObject']],2),pos(28,5)),type([['FSObject']],1),pos(60,35)),type([untyped],0),pos(56,35)),type([untyped],0),pos(40,35)),type([untyped],0),pos(22,35)),type([untyped],0),pos(1,35))],pos(1,11)),global_scope(5),exact_scopes([]),bitwidth(-1),pos(1,38))]),functions([]),signatures([signature('FSObject',[field('parent',loneof(identifier('Dir',type([['Dir']],1),pos(5,5)),type([['Dir']],1),pos(24,2)),type([['Dir']],1),[],pos(16,2))],[],[],pos(5,2)),signature('Dir',[field('contents',setof(identifier('FSObject',type([['FSObject']],1),pos(5,2)),type([['FSObject']],1),pos(38,5)),type([['FSObject']],1),[],pos(28,5))],[],[subsig('FSObject')],pos(5,5)),signature('File',[],[],[subsig('FSObject')],pos(5,8)),signature('Root',[],[no(join(identifier('Root',type([['Root']],1),pos(9,17)),identifier('parent',type([['FSObject', 'Dir']],2),pos(16,2)),type([['Dir']],1),pos(35,17)),type([untyped],0),pos(32,17))],[one, subsig('Dir')],pos(9,17))])) ,
    translate_alloy_model(AlloyTerm,Translated) , 
    Translated == machine(generated(none,abstract_machine(none,machine(none),machine_header(none,alloytranslation,[]),[properties(none,conjunct(none,member(pos(0,0,2,16,0,0),identifier(none,parent),partial_function(none,identifier(none,'FSObject'),identifier(pos(0,0,5,5,0,0),'Dir'))),conjunct(none,subset(pos(0,0,5,5,0,0),identifier(none,'Dir'),identifier(none,'FSObject')),conjunct(none,member(pos(0,0,5,28,0,0),identifier(none,contents),relations(none,identifier(none,'Dir'),identifier(pos(0,0,2,5,0,0),'FSObject'))),conjunct(none,subset(pos(0,0,8,5,0,0),identifier(none,'File'),identifier(none,'FSObject')),conjunct(none,subset(pos(0,0,17,9,0,0),set_extension(none,[identifier(none,'Root')]),identifier(none,'Dir')),conjunct(none,equal(pos(0,0,17,32,0,0),image(pos(0,0,17,35,0,0),identifier(pos(0,0,2,16,0,0),parent),set_extension(pos(0,0,17,9,0,0),[identifier(none,'Root')])),empty_set(none)),conjunct(none,negation(pos(0,0,23,18,0,0),exists(none,[identifier(none,d)],conjunct(none,subset(pos(0,0,23,21,0,0),set_extension(none,[identifier(none,d)]),identifier(pos(0,0,5,5,0,0),'Dir')),subset(pos(0,0,23,32,0,0),set_extension(pos(0,0,23,21,0,0),[identifier(none,d)]),image(pos(0,0,23,36,0,0),closure(pos(0,0,23,37,0,0),identifier(pos(0,0,5,28,0,0),contents)),set_extension(pos(0,0,23,21,0,0),[identifier(none,d)])))))),conjunct(none,equal(pos(0,0,29,18,0,0),card(none,comprehension_set(none,[identifier(none,d)],conjunct(none,subset(pos(0,0,29,22,0,0),set_extension(none,[identifier(none,d)]),identifier(pos(0,0,5,5,0,0),'Dir')),equal(pos(0,0,29,31,0,0),image(pos(0,0,29,35,0,0),identifier(pos(0,0,2,16,0,0),parent),set_extension(pos(0,0,29,22,0,0),[identifier(none,d)])),empty_set(none))))),integer(none,1)),conjunct(none,forall(pos(0,0,35,22,0,0),[identifier(none,o)],implication(none,subset(pos(0,0,35,26,0,0),set_extension(none,[identifier(none,o)]),identifier(pos(0,0,2,5,0,0),'FSObject')),less_equal(pos(0,0,35,40,0,0),card(none,comprehension_set(none,[identifier(none,d)],conjunct(none,subset(pos(0,0,35,45,0,0),set_extension(none,[identifier(none,d)]),identifier(pos(0,0,5,5,0,0),'Dir')),subset(pos(0,0,35,56,0,0),set_extension(pos(0,0,35,26,0,0),[identifier(none,o)]),image(pos(0,0,35,60,0,0),identifier(pos(0,0,5,28,0,0),contents),set_extension(pos(0,0,35,45,0,0),[identifier(none,d)])))))),integer(none,1)))),conjunct(none,forall(pos(0,0,11,8,0,0),[identifier(none,d),identifier(none,o)],implication(none,conjunct(none,subset(pos(0,0,11,20,0,0),set_extension(none,[identifier(none,o)]),image(pos(0,0,11,24,0,0),identifier(pos(0,0,5,28,0,0),contents),set_extension(pos(0,0,11,12,0,0),[identifier(none,d)]))),subset(pos(0,0,11,12,0,0),set_extension(none,[identifier(none,d)]),identifier(pos(0,0,5,5,0,0),'Dir'))),equal(pos(0,0,11,45,0,0),image(pos(0,0,11,37,0,0),identifier(pos(0,0,2,16,0,0),parent),set_extension(pos(0,0,11,20,0,0),[identifier(none,o)])),set_extension(pos(0,0,11,12,0,0),[identifier(none,d)])))),conjunct(none,equal(pos(0,0,14,19,0,0),union(pos(0,0,14,13,0,0),identifier(pos(0,0,8,5,0,0),'File'),identifier(pos(0,0,5,5,0,0),'Dir')),identifier(pos(0,0,2,5,0,0),'FSObject')),conjunct(none,subset(pos(0,0,20,17,0,0),identifier(pos(0,0,2,5,0,0),'FSObject'),image(pos(0,0,20,24,0,0),reflexive_closure(pos(0,0,20,25,0,0),identifier(pos(0,0,5,28,0,0),contents)),set_extension(pos(0,0,17,9,0,0),[identifier(none,'Root')]))),conjunct(none,equal(none,identifier(none,'FSObject'),union(none,identifier(none,'Dir'),identifier(none,'File'))),conjunct(none,not_equal(none,identifier(none,'File'),identifier(none,'Dir')),equal(none,card(none,identifier(none,'FSObject')),integer(none,2))))))))))))))))),operations(none,[operation(pos(0,0,38,1,0,0),identifier(pos(0,0,38,1,0,0),check2),[],[],precondition(pos(0,0,38,1,0,0),conjunct(pos(0,0,38,1,0,0),conjunct(none,truth(none),conjunct(none,less_equal(none,card(none,set_extension(none,[identifier(none,'Root')])),integer(none,5)),conjunct(none,less_equal(none,card(none,identifier(none,'File')),integer(none,5)),conjunct(none,less_equal(none,card(none,identifier(none,'Dir')),integer(none,5)),less_equal(none,card(none,identifier(none,'FSObject')),integer(none,5)))))),conjunct(none,negation(pos(0,0,35,1,0,0),forall(pos(0,0,35,22,0,0),[identifier(none,o)],implication(none,subset(pos(0,0,35,26,0,0),set_extension(none,[identifier(none,o)]),identifier(pos(0,0,2,5,0,0),'FSObject')),less_equal(pos(0,0,35,40,0,0),card(none,comprehension_set(none,[identifier(none,d)],conjunct(none,subset(pos(0,0,35,45,0,0),set_extension(none,[identifier(none,d)]),identifier(pos(0,0,5,5,0,0),'Dir')),subset(pos(0,0,35,56,0,0),set_extension(pos(0,0,35,26,0,0),[identifier(none,o)]),image(pos(0,0,35,60,0,0),identifier(pos(0,0,5,28,0,0),contents),set_extension(pos(0,0,35,45,0,0),[identifier(none,d)])))))),integer(none,1))))),conjunct(none,subset(pos(0,0,20,17,0,0),identifier(pos(0,0,2,5,0,0),'FSObject'),image(pos(0,0,20,24,0,0),reflexive_closure(pos(0,0,20,25,0,0),identifier(pos(0,0,5,28,0,0),contents)),set_extension(pos(0,0,17,9,0,0),[identifier(none,'Root')]))),conjunct(none,equal(pos(0,0,14,19,0,0),union(pos(0,0,14,13,0,0),identifier(pos(0,0,8,5,0,0),'File'),identifier(pos(0,0,5,5,0,0),'Dir')),identifier(pos(0,0,2,5,0,0),'FSObject')),forall(pos(0,0,11,8,0,0),[identifier(none,d),identifier(none,o)],implication(none,conjunct(none,subset(pos(0,0,11,20,0,0),set_extension(none,[identifier(none,o)]),image(pos(0,0,11,24,0,0),identifier(pos(0,0,5,28,0,0),contents),set_extension(pos(0,0,11,12,0,0),[identifier(none,d)]))),subset(pos(0,0,11,12,0,0),set_extension(none,[identifier(none,d)]),identifier(pos(0,0,5,5,0,0),'Dir'))),equal(pos(0,0,11,45,0,0),image(pos(0,0,11,37,0,0),identifier(pos(0,0,2,16,0,0),parent),set_extension(pos(0,0,11,20,0,0),[identifier(none,o)])),set_extension(pos(0,0,11,12,0,0),[identifier(none,d)])))))))),skip(none))),operation(pos(0,0,32,1,0,0),identifier(pos(0,0,32,1,0,0),check1),[],[],precondition(pos(0,0,32,1,0,0),conjunct(pos(0,0,32,1,0,0),conjunct(none,truth(none),conjunct(none,less_equal(none,card(none,set_extension(none,[identifier(none,'Root')])),integer(none,5)),conjunct(none,less_equal(none,card(none,identifier(none,'File')),integer(none,5)),conjunct(none,less_equal(none,card(none,identifier(none,'Dir')),integer(none,5)),less_equal(none,card(none,identifier(none,'FSObject')),integer(none,5)))))),conjunct(none,negation(pos(0,0,29,1,0,0),equal(pos(0,0,29,18,0,0),card(none,comprehension_set(none,[identifier(none,d)],conjunct(none,subset(pos(0,0,29,22,0,0),set_extension(none,[identifier(none,d)]),identifier(pos(0,0,5,5,0,0),'Dir')),equal(pos(0,0,29,31,0,0),image(pos(0,0,29,35,0,0),identifier(pos(0,0,2,16,0,0),parent),set_extension(pos(0,0,29,22,0,0),[identifier(none,d)])),empty_set(none))))),integer(none,1))),conjunct(none,subset(pos(0,0,20,17,0,0),identifier(pos(0,0,2,5,0,0),'FSObject'),image(pos(0,0,20,24,0,0),reflexive_closure(pos(0,0,20,25,0,0),identifier(pos(0,0,5,28,0,0),contents)),set_extension(pos(0,0,17,9,0,0),[identifier(none,'Root')]))),conjunct(none,equal(pos(0,0,14,19,0,0),union(pos(0,0,14,13,0,0),identifier(pos(0,0,8,5,0,0),'File'),identifier(pos(0,0,5,5,0,0),'Dir')),identifier(pos(0,0,2,5,0,0),'FSObject')),forall(pos(0,0,11,8,0,0),[identifier(none,d),identifier(none,o)],implication(none,conjunct(none,subset(pos(0,0,11,20,0,0),set_extension(none,[identifier(none,o)]),image(pos(0,0,11,24,0,0),identifier(pos(0,0,5,28,0,0),contents),set_extension(pos(0,0,11,12,0,0),[identifier(none,d)]))),subset(pos(0,0,11,12,0,0),set_extension(none,[identifier(none,d)]),identifier(pos(0,0,5,5,0,0),'Dir'))),equal(pos(0,0,11,45,0,0),image(pos(0,0,11,37,0,0),identifier(pos(0,0,2,16,0,0),parent),set_extension(pos(0,0,11,20,0,0),[identifier(none,o)])),set_extension(pos(0,0,11,12,0,0),[identifier(none,d)])))))))),skip(none))),operation(pos(0,0,26,1,0,0),identifier(pos(0,0,26,1,0,0),check0),[],[],precondition(pos(0,0,26,1,0,0),conjunct(pos(0,0,26,1,0,0),conjunct(none,truth(none),conjunct(none,less_equal(none,card(none,set_extension(none,[identifier(none,'Root')])),integer(none,5)),conjunct(none,less_equal(none,card(none,identifier(none,'File')),integer(none,5)),conjunct(none,less_equal(none,card(none,identifier(none,'Dir')),integer(none,5)),less_equal(none,card(none,identifier(none,'FSObject')),integer(none,5)))))),conjunct(none,negation(pos(0,0,23,1,0,0),negation(pos(0,0,23,18,0,0),exists(none,[identifier(none,d)],conjunct(none,subset(pos(0,0,23,21,0,0),set_extension(none,[identifier(none,d)]),identifier(pos(0,0,5,5,0,0),'Dir')),subset(pos(0,0,23,32,0,0),set_extension(pos(0,0,23,21,0,0),[identifier(none,d)]),image(pos(0,0,23,36,0,0),closure(pos(0,0,23,37,0,0),identifier(pos(0,0,5,28,0,0),contents)),set_extension(pos(0,0,23,21,0,0),[identifier(none,d)]))))))),conjunct(none,subset(pos(0,0,20,17,0,0),identifier(pos(0,0,2,5,0,0),'FSObject'),image(pos(0,0,20,24,0,0),reflexive_closure(pos(0,0,20,25,0,0),identifier(pos(0,0,5,28,0,0),contents)),set_extension(pos(0,0,17,9,0,0),[identifier(none,'Root')]))),conjunct(none,equal(pos(0,0,14,19,0,0),union(pos(0,0,14,13,0,0),identifier(pos(0,0,8,5,0,0),'File'),identifier(pos(0,0,5,5,0,0),'Dir')),identifier(pos(0,0,2,5,0,0),'FSObject')),forall(pos(0,0,11,8,0,0),[identifier(none,d),identifier(none,o)],implication(none,conjunct(none,subset(pos(0,0,11,20,0,0),set_extension(none,[identifier(none,o)]),image(pos(0,0,11,24,0,0),identifier(pos(0,0,5,28,0,0),contents),set_extension(pos(0,0,11,12,0,0),[identifier(none,d)]))),subset(pos(0,0,11,12,0,0),set_extension(none,[identifier(none,d)]),identifier(pos(0,0,5,5,0,0),'Dir'))),equal(pos(0,0,11,45,0,0),image(pos(0,0,11,37,0,0),identifier(pos(0,0,2,16,0,0),parent),set_extension(pos(0,0,11,20,0,0),[identifier(none,o)])),set_extension(pos(0,0,11,12,0,0),[identifier(none,d)])))))))),skip(none)))]),constants(none,[identifier(pos(0,0,17,9,0,0),'Root'),identifier(pos(0,0,8,5,0,0),'File'),identifier(none,contents),identifier(pos(0,0,5,5,0,0),'Dir'),identifier(none,parent)]),sets(none,[deferred_set(pos(0,0,2,5,0,0),'FSObject')])]))).

test(filesystem2,[]) :-
    AlloyTerm = alloy_model(facts([fact(and([no(join(identifier('Root',type([['Root']],1),pos(9,13)),identifier('parent',type([['FSObject', 'Dir']],2),pos(5,4)),type([['Dir']],1),pos(12,16)),type([untyped],0),pos(5,16)), equal(identifier('parent',type([['FSObject', 'Dir']],2),pos(5,4)),inverse(identifier('contents',type([['Dir', 'FSObject']],2),pos(5,8)),type([['FSObject', 'Dir']],2),pos(14,17)),type([untyped],0),pos(12,17)), equal(plus(identifier('File',type([['File']],1),pos(5,11)),identifier('Dir',type([['Dir']],1),pos(5,7)),type([['File'], ['Dir']],1),pos(10,18)),identifier('FSObject',type([['FSObject']],1),pos(5,3)),type([untyped],0),pos(16,18)), in(identifier('FSObject',type([['FSObject']],1),pos(5,3)),join(identifier('Root',type([['Root']],1),pos(9,13)),closure(identifier('contents',type([['Dir', 'FSObject']],2),pos(5,8)),type([['univ', 'univ']],2),pos(22,19)),type([['univ']],1),pos(21,19)),type([untyped],0),pos(14,19))],pos(1,1)),(1,15))]),assertions([fact(no(['d'],[field('d',oneof(identifier('Dir',type([['Dir']],1),pos(5,7)),type([['Dir']],1),pos(12,23)),type([['Dir']],1),[],pos(8,23))],in(identifier('d',type([['Dir']],1),pos(8,23)),join(identifier('d',type([['Dir']],1),pos(8,23)),closure1(identifier('contents',type([['Dir', 'FSObject']],2),pos(5,8)),type([['Dir', 'FSObject']],2),pos(25,23)),type([['FSObject']],1),pos(24,23)),type([untyped],0),pos(20,23)),type([untyped],0),pos(5,23)),(1,22)),fact(one(['d'],[field('d',oneof(identifier('Dir',type([['Dir']],1),pos(5,7)),type([['Dir']],1),pos(13,27)),type([['Dir']],1),[],pos(9,27))],no(join(identifier('d',type([['Dir']],1),pos(9,27)),identifier('parent',type([['FSObject', 'Dir']],2),pos(5,4)),type([['Dir']],1),pos(23,27)),type([untyped],0),pos(19,27)),type([untyped],0),pos(5,27)),(1,26)),fact(all(['f'],[field('f',oneof(identifier('FSObject',type([['FSObject']],1),pos(5,3)),type([['FSObject']],1),pos(13,31)),type([['FSObject']],1),[],pos(9,31))],lone(['d'],[field('d',oneof(identifier('Dir',type([['Dir']],1),pos(5,7)),type([['Dir']],1),pos(33,31)),type([['Dir']],1),[],pos(29,31))],in(identifier('f',type([['FSObject']],1),pos(9,31)),join(identifier('d',type([['Dir']],1),pos(29,31)),identifier('contents',type([['Dir', 'FSObject']],2),pos(5,8)),type([['FSObject']],1),pos(45,31)),type([untyped],0),pos(41,31)),type([untyped],0),pos(24,31)),type([untyped],0),pos(5,31)),(1,30))]),commands([check(and([no(join(identifier('Root',type([['Root']],1),pos(9,13)),identifier('parent',type([['FSObject', 'Dir']],2),pos(5,4)),type([['Dir']],1),pos(12,16)),type([untyped],0),pos(5,16)), equal(identifier('parent',type([['FSObject', 'Dir']],2),pos(5,4)),inverse(identifier('contents',type([['Dir', 'FSObject']],2),pos(5,8)),type([['FSObject', 'Dir']],2),pos(14,17)),type([untyped],0),pos(12,17)), equal(plus(identifier('File',type([['File']],1),pos(5,11)),identifier('Dir',type([['Dir']],1),pos(5,7)),type([['File'], ['Dir']],1),pos(10,18)),identifier('FSObject',type([['FSObject']],1),pos(5,3)),type([untyped],0),pos(16,18)), in(identifier('FSObject',type([['FSObject']],1),pos(5,3)),join(identifier('Root',type([['Root']],1),pos(9,13)),closure(identifier('contents',type([['Dir', 'FSObject']],2),pos(5,8)),type([['univ', 'univ']],2),pos(22,19)),type([['univ']],1),pos(21,19)),type([untyped],0),pos(14,19)), not(no(['d'],[field('d',oneof(identifier('Dir',type([['Dir']],1),pos(5,7)),type([['Dir']],1),pos(12,23)),type([['Dir']],1),[],pos(8,23))],in(identifier('d',type([['Dir']],1),pos(8,23)),join(identifier('d',type([['Dir']],1),pos(8,23)),closure1(identifier('contents',type([['Dir', 'FSObject']],2),pos(5,8)),type([['Dir', 'FSObject']],2),pos(25,23)),type([['FSObject']],1),pos(24,23)),type([untyped],0),pos(20,23)),type([untyped],0),pos(5,23)),type([untyped],0),pos(1,22))],pos(5,16)),global_scope(5),exact_scopes([]),bitwidth(-1),pos(1,34)),check(and([no(join(identifier('Root',type([['Root']],1),pos(9,13)),identifier('parent',type([['FSObject', 'Dir']],2),pos(5,4)),type([['Dir']],1),pos(12,16)),type([untyped],0),pos(5,16)), equal(identifier('parent',type([['FSObject', 'Dir']],2),pos(5,4)),inverse(identifier('contents',type([['Dir', 'FSObject']],2),pos(5,8)),type([['FSObject', 'Dir']],2),pos(14,17)),type([untyped],0),pos(12,17)), equal(plus(identifier('File',type([['File']],1),pos(5,11)),identifier('Dir',type([['Dir']],1),pos(5,7)),type([['File'], ['Dir']],1),pos(10,18)),identifier('FSObject',type([['FSObject']],1),pos(5,3)),type([untyped],0),pos(16,18)), in(identifier('FSObject',type([['FSObject']],1),pos(5,3)),join(identifier('Root',type([['Root']],1),pos(9,13)),closure(identifier('contents',type([['Dir', 'FSObject']],2),pos(5,8)),type([['univ', 'univ']],2),pos(22,19)),type([['univ']],1),pos(21,19)),type([untyped],0),pos(14,19)), not(one(['d'],[field('d',oneof(identifier('Dir',type([['Dir']],1),pos(5,7)),type([['Dir']],1),pos(13,27)),type([['Dir']],1),[],pos(9,27))],no(join(identifier('d',type([['Dir']],1),pos(9,27)),identifier('parent',type([['FSObject', 'Dir']],2),pos(5,4)),type([['Dir']],1),pos(23,27)),type([untyped],0),pos(19,27)),type([untyped],0),pos(5,27)),type([untyped],0),pos(1,26))],pos(5,16)),global_scope(5),exact_scopes([]),bitwidth(-1),pos(1,36)),check(and([no(join(identifier('Root',type([['Root']],1),pos(9,13)),identifier('parent',type([['FSObject', 'Dir']],2),pos(5,4)),type([['Dir']],1),pos(12,16)),type([untyped],0),pos(5,16)), equal(identifier('parent',type([['FSObject', 'Dir']],2),pos(5,4)),inverse(identifier('contents',type([['Dir', 'FSObject']],2),pos(5,8)),type([['FSObject', 'Dir']],2),pos(14,17)),type([untyped],0),pos(12,17)), equal(plus(identifier('File',type([['File']],1),pos(5,11)),identifier('Dir',type([['Dir']],1),pos(5,7)),type([['File'], ['Dir']],1),pos(10,18)),identifier('FSObject',type([['FSObject']],1),pos(5,3)),type([untyped],0),pos(16,18)), in(identifier('FSObject',type([['FSObject']],1),pos(5,3)),join(identifier('Root',type([['Root']],1),pos(9,13)),closure(identifier('contents',type([['Dir', 'FSObject']],2),pos(5,8)),type([['univ', 'univ']],2),pos(22,19)),type([['univ']],1),pos(21,19)),type([untyped],0),pos(14,19)), not(all(['f'],[field('f',oneof(identifier('FSObject',type([['FSObject']],1),pos(5,3)),type([['FSObject']],1),pos(13,31)),type([['FSObject']],1),[],pos(9,31))],lone(['d'],[field('d',oneof(identifier('Dir',type([['Dir']],1),pos(5,7)),type([['Dir']],1),pos(33,31)),type([['Dir']],1),[],pos(29,31))],in(identifier('f',type([['FSObject']],1),pos(9,31)),join(identifier('d',type([['Dir']],1),pos(29,31)),identifier('contents',type([['Dir', 'FSObject']],2),pos(5,8)),type([['FSObject']],1),pos(45,31)),type([untyped],0),pos(41,31)),type([untyped],0),pos(24,31)),type([untyped],0),pos(5,31)),type([untyped],0),pos(1,30))],pos(5,16)),global_scope(5),exact_scopes([]),bitwidth(-1),pos(1,38))]),functions([]),signatures([signature('FSObject',[field('parent',loneof(identifier('Dir',type([['Dir']],1),pos(5,7)),type([['Dir']],1),pos(14,4)),type([['Dir']],1),[],pos(5,4))],[],[],pos(5,3)),signature('Dir',[field('contents',setof(identifier('FSObject',type([['FSObject']],1),pos(5,3)),type([['FSObject']],1),pos(16,8)),type([['FSObject']],1),[],pos(5,8))],[],[subsig('FSObject')],pos(5,7)),signature('File',[],[],[subsig('FSObject')],pos(5,11)),signature('Root',[],[],[one, subsig('Dir')],pos(9,13))])) ,
    translate_alloy_model(AlloyTerm,Translated) , 
    Translated == machine(generated(none,abstract_machine(none,machine(none),machine_header(none,alloytranslation,[]),[properties(none,conjunct(none,member(pos(0,0,4,5,0,0),identifier(none,parent),partial_function(none,identifier(none,'FSObject'),identifier(pos(0,0,7,5,0,0),'Dir'))),conjunct(none,subset(pos(0,0,7,5,0,0),identifier(none,'Dir'),identifier(none,'FSObject')),conjunct(none,member(pos(0,0,8,5,0,0),identifier(none,contents),relations(none,identifier(none,'Dir'),identifier(pos(0,0,3,5,0,0),'FSObject'))),conjunct(none,subset(pos(0,0,11,5,0,0),identifier(none,'File'),identifier(none,'FSObject')),conjunct(none,subset(pos(0,0,13,9,0,0),set_extension(none,[identifier(none,'Root')]),identifier(none,'Dir')),conjunct(none,negation(pos(0,0,23,5,0,0),exists(none,[identifier(none,d)],conjunct(none,subset(pos(0,0,23,8,0,0),set_extension(none,[identifier(none,d)]),identifier(pos(0,0,7,5,0,0),'Dir')),subset(pos(0,0,23,20,0,0),set_extension(pos(0,0,23,8,0,0),[identifier(none,d)]),image(pos(0,0,23,24,0,0),closure(pos(0,0,23,25,0,0),identifier(pos(0,0,8,5,0,0),contents)),set_extension(pos(0,0,23,8,0,0),[identifier(none,d)])))))),conjunct(none,equal(pos(0,0,27,5,0,0),card(none,comprehension_set(none,[identifier(none,d)],conjunct(none,subset(pos(0,0,27,9,0,0),set_extension(none,[identifier(none,d)]),identifier(pos(0,0,7,5,0,0),'Dir')),equal(pos(0,0,27,19,0,0),image(pos(0,0,27,23,0,0),identifier(pos(0,0,4,5,0,0),parent),set_extension(pos(0,0,27,9,0,0),[identifier(none,d)])),empty_set(none))))),integer(none,1)),conjunct(none,forall(pos(0,0,31,5,0,0),[identifier(none,f)],implication(none,subset(pos(0,0,31,9,0,0),set_extension(none,[identifier(none,f)]),identifier(pos(0,0,3,5,0,0),'FSObject')),less_equal(pos(0,0,31,24,0,0),card(none,comprehension_set(none,[identifier(none,d)],conjunct(none,subset(pos(0,0,31,29,0,0),set_extension(none,[identifier(none,d)]),identifier(pos(0,0,7,5,0,0),'Dir')),subset(pos(0,0,31,41,0,0),set_extension(pos(0,0,31,9,0,0),[identifier(none,f)]),image(pos(0,0,31,45,0,0),identifier(pos(0,0,8,5,0,0),contents),set_extension(pos(0,0,31,29,0,0),[identifier(none,d)])))))),integer(none,1)))),conjunct(none,conjunct(none,subset(pos(0,0,19,14,0,0),identifier(pos(0,0,3,5,0,0),'FSObject'),image(pos(0,0,19,21,0,0),reflexive_closure(pos(0,0,19,22,0,0),identifier(pos(0,0,8,5,0,0),contents)),set_extension(pos(0,0,13,9,0,0),[identifier(none,'Root')]))),conjunct(none,equal(pos(0,0,18,16,0,0),union(pos(0,0,18,10,0,0),identifier(pos(0,0,11,5,0,0),'File'),identifier(pos(0,0,7,5,0,0),'Dir')),identifier(pos(0,0,3,5,0,0),'FSObject')),conjunct(none,equal(pos(0,0,17,12,0,0),identifier(pos(0,0,4,5,0,0),parent),reverse(pos(0,0,17,14,0,0),identifier(pos(0,0,8,5,0,0),contents))),equal(pos(0,0,16,5,0,0),image(pos(0,0,16,12,0,0),identifier(pos(0,0,4,5,0,0),parent),set_extension(pos(0,0,13,9,0,0),[identifier(none,'Root')])),empty_set(none))))),conjunct(none,equal(none,identifier(none,'FSObject'),union(none,identifier(none,'Dir'),identifier(none,'File'))),conjunct(none,not_equal(none,identifier(none,'File'),identifier(none,'Dir')),equal(none,card(none,identifier(none,'FSObject')),integer(none,2)))))))))))))),operations(none,[operation(pos(0,0,38,1,0,0),identifier(pos(0,0,38,1,0,0),check2),[],[],precondition(pos(0,0,38,1,0,0),conjunct(pos(0,0,38,1,0,0),conjunct(none,truth(none),conjunct(none,less_equal(none,card(none,set_extension(none,[identifier(none,'Root')])),integer(none,5)),conjunct(none,less_equal(none,card(none,identifier(none,'File')),integer(none,5)),conjunct(none,less_equal(none,card(none,identifier(none,'Dir')),integer(none,5)),less_equal(none,card(none,identifier(none,'FSObject')),integer(none,5)))))),conjunct(none,negation(pos(0,0,30,1,0,0),forall(pos(0,0,31,5,0,0),[identifier(none,f)],implication(none,subset(pos(0,0,31,9,0,0),set_extension(none,[identifier(none,f)]),identifier(pos(0,0,3,5,0,0),'FSObject')),less_equal(pos(0,0,31,24,0,0),card(none,comprehension_set(none,[identifier(none,d)],conjunct(none,subset(pos(0,0,31,29,0,0),set_extension(none,[identifier(none,d)]),identifier(pos(0,0,7,5,0,0),'Dir')),subset(pos(0,0,31,41,0,0),set_extension(pos(0,0,31,9,0,0),[identifier(none,f)]),image(pos(0,0,31,45,0,0),identifier(pos(0,0,8,5,0,0),contents),set_extension(pos(0,0,31,29,0,0),[identifier(none,d)])))))),integer(none,1))))),conjunct(none,subset(pos(0,0,19,14,0,0),identifier(pos(0,0,3,5,0,0),'FSObject'),image(pos(0,0,19,21,0,0),reflexive_closure(pos(0,0,19,22,0,0),identifier(pos(0,0,8,5,0,0),contents)),set_extension(pos(0,0,13,9,0,0),[identifier(none,'Root')]))),conjunct(none,equal(pos(0,0,18,16,0,0),union(pos(0,0,18,10,0,0),identifier(pos(0,0,11,5,0,0),'File'),identifier(pos(0,0,7,5,0,0),'Dir')),identifier(pos(0,0,3,5,0,0),'FSObject')),conjunct(none,equal(pos(0,0,17,12,0,0),identifier(pos(0,0,4,5,0,0),parent),reverse(pos(0,0,17,14,0,0),identifier(pos(0,0,8,5,0,0),contents))),equal(pos(0,0,16,5,0,0),image(pos(0,0,16,12,0,0),identifier(pos(0,0,4,5,0,0),parent),set_extension(pos(0,0,13,9,0,0),[identifier(none,'Root')])),empty_set(none))))))),skip(none))),operation(pos(0,0,36,1,0,0),identifier(pos(0,0,36,1,0,0),check1),[],[],precondition(pos(0,0,36,1,0,0),conjunct(pos(0,0,36,1,0,0),conjunct(none,truth(none),conjunct(none,less_equal(none,card(none,set_extension(none,[identifier(none,'Root')])),integer(none,5)),conjunct(none,less_equal(none,card(none,identifier(none,'File')),integer(none,5)),conjunct(none,less_equal(none,card(none,identifier(none,'Dir')),integer(none,5)),less_equal(none,card(none,identifier(none,'FSObject')),integer(none,5)))))),conjunct(none,negation(pos(0,0,26,1,0,0),equal(pos(0,0,27,5,0,0),card(none,comprehension_set(none,[identifier(none,d)],conjunct(none,subset(pos(0,0,27,9,0,0),set_extension(none,[identifier(none,d)]),identifier(pos(0,0,7,5,0,0),'Dir')),equal(pos(0,0,27,19,0,0),image(pos(0,0,27,23,0,0),identifier(pos(0,0,4,5,0,0),parent),set_extension(pos(0,0,27,9,0,0),[identifier(none,d)])),empty_set(none))))),integer(none,1))),conjunct(none,subset(pos(0,0,19,14,0,0),identifier(pos(0,0,3,5,0,0),'FSObject'),image(pos(0,0,19,21,0,0),reflexive_closure(pos(0,0,19,22,0,0),identifier(pos(0,0,8,5,0,0),contents)),set_extension(pos(0,0,13,9,0,0),[identifier(none,'Root')]))),conjunct(none,equal(pos(0,0,18,16,0,0),union(pos(0,0,18,10,0,0),identifier(pos(0,0,11,5,0,0),'File'),identifier(pos(0,0,7,5,0,0),'Dir')),identifier(pos(0,0,3,5,0,0),'FSObject')),conjunct(none,equal(pos(0,0,17,12,0,0),identifier(pos(0,0,4,5,0,0),parent),reverse(pos(0,0,17,14,0,0),identifier(pos(0,0,8,5,0,0),contents))),equal(pos(0,0,16,5,0,0),image(pos(0,0,16,12,0,0),identifier(pos(0,0,4,5,0,0),parent),set_extension(pos(0,0,13,9,0,0),[identifier(none,'Root')])),empty_set(none))))))),skip(none))),operation(pos(0,0,34,1,0,0),identifier(pos(0,0,34,1,0,0),check0),[],[],precondition(pos(0,0,34,1,0,0),conjunct(pos(0,0,34,1,0,0),conjunct(none,truth(none),conjunct(none,less_equal(none,card(none,set_extension(none,[identifier(none,'Root')])),integer(none,5)),conjunct(none,less_equal(none,card(none,identifier(none,'File')),integer(none,5)),conjunct(none,less_equal(none,card(none,identifier(none,'Dir')),integer(none,5)),less_equal(none,card(none,identifier(none,'FSObject')),integer(none,5)))))),conjunct(none,negation(pos(0,0,22,1,0,0),negation(pos(0,0,23,5,0,0),exists(none,[identifier(none,d)],conjunct(none,subset(pos(0,0,23,8,0,0),set_extension(none,[identifier(none,d)]),identifier(pos(0,0,7,5,0,0),'Dir')),subset(pos(0,0,23,20,0,0),set_extension(pos(0,0,23,8,0,0),[identifier(none,d)]),image(pos(0,0,23,24,0,0),closure(pos(0,0,23,25,0,0),identifier(pos(0,0,8,5,0,0),contents)),set_extension(pos(0,0,23,8,0,0),[identifier(none,d)]))))))),conjunct(none,subset(pos(0,0,19,14,0,0),identifier(pos(0,0,3,5,0,0),'FSObject'),image(pos(0,0,19,21,0,0),reflexive_closure(pos(0,0,19,22,0,0),identifier(pos(0,0,8,5,0,0),contents)),set_extension(pos(0,0,13,9,0,0),[identifier(none,'Root')]))),conjunct(none,equal(pos(0,0,18,16,0,0),union(pos(0,0,18,10,0,0),identifier(pos(0,0,11,5,0,0),'File'),identifier(pos(0,0,7,5,0,0),'Dir')),identifier(pos(0,0,3,5,0,0),'FSObject')),conjunct(none,equal(pos(0,0,17,12,0,0),identifier(pos(0,0,4,5,0,0),parent),reverse(pos(0,0,17,14,0,0),identifier(pos(0,0,8,5,0,0),contents))),equal(pos(0,0,16,5,0,0),image(pos(0,0,16,12,0,0),identifier(pos(0,0,4,5,0,0),parent),set_extension(pos(0,0,13,9,0,0),[identifier(none,'Root')])),empty_set(none))))))),skip(none)))]),constants(none,[identifier(pos(0,0,13,9,0,0),'Root'),identifier(pos(0,0,11,5,0,0),'File'),identifier(none,contents),identifier(pos(0,0,7,5,0,0),'Dir'),identifier(none,parent)]),sets(none,[deferred_set(pos(0,0,3,5,0,0),'FSObject')])]))).

test(self_grandpas,[]) :-
    AlloyTerm = alloy_model(facts([fact(no(['p'],[field('p',oneof(identifier('Person',type([['Person']],1),pos(14,3)),type([['Person']],1),pos(12,17)),type([['Person']],1),[],pos(8,17))],in(identifier('p',type([['Person']],1),pos(8,17)),join(identifier('p',type([['Person']],1),pos(8,17)),closure1(plus(identifier('mother',type([['Person', 'Woman']],2),pos(5,5)),identifier('father',type([['Person', 'Man']],2),pos(5,4)),type([['Person', 'Woman'], ['Person', 'Man']],2),pos(37,17)),type([['Person', 'Woman'], ['Person', 'Man']],2),pos(28,17)),type([['Woman'], ['Man']],1),pos(27,17)),type([untyped],0),pos(23,17)),type([untyped],0),pos(5,17)),(1,16)),fact(equal(identifier('wife',type([['Man', 'Woman']],2),pos(5,9)),inverse(identifier('husband',type([['Woman', 'Man']],2),pos(5,13)),type([['Man', 'Woman']],2),pos(12,21)),type([untyped],0),pos(10,21)),(1,20)),fact(and([no(intersection(identifier('wife',type([['Man', 'Woman']],2),pos(5,9)),join(closure(plus(identifier('mother',type([['Person', 'Woman']],2),pos(5,5)),identifier('father',type([['Person', 'Man']],2),pos(5,4)),type([['Person', 'Woman'], ['Person', 'Man']],2),pos(24,25)),type([['univ', 'univ']],2),pos(15,25)),identifier('mother',type([['Person', 'Woman']],2),pos(5,5)),type([['univ', 'Woman']],2),pos(33,25)),type([['Man', 'Woman']],2),pos(13,25)),type([untyped],0),pos(5,25)), no(intersection(identifier('husband',type([['Woman', 'Man']],2),pos(5,13)),join(closure(plus(identifier('mother',type([['Person', 'Woman']],2),pos(5,5)),identifier('father',type([['Person', 'Man']],2),pos(5,4)),type([['Person', 'Woman'], ['Person', 'Man']],2),pos(27,26)),type([['univ', 'univ']],2),pos(18,26)),identifier('father',type([['Person', 'Man']],2),pos(5,4)),type([['univ', 'Man']],2),pos(36,26)),type([['Woman', 'Man']],2),pos(16,26)),type([untyped],0),pos(5,26))],pos(1,1)),(1,24))]),assertions([]),commands([run(and([no(['p'],[field('p',oneof(identifier('Person',type([['Person']],1),pos(14,3)),type([['Person']],1),pos(12,17)),type([['Person']],1),[],pos(8,17))],in(identifier('p',type([['Person']],1),pos(8,17)),join(identifier('p',type([['Person']],1),pos(8,17)),closure1(plus(identifier('mother',type([['Person', 'Woman']],2),pos(5,5)),identifier('father',type([['Person', 'Man']],2),pos(5,4)),type([['Person', 'Woman'], ['Person', 'Man']],2),pos(37,17)),type([['Person', 'Woman'], ['Person', 'Man']],2),pos(28,17)),type([['Woman'], ['Man']],1),pos(27,17)),type([untyped],0),pos(23,17)),type([untyped],0),pos(5,17)), equal(identifier('wife',type([['Man', 'Woman']],2),pos(5,9)),inverse(identifier('husband',type([['Woman', 'Man']],2),pos(5,13)),type([['Man', 'Woman']],2),pos(12,21)),type([untyped],0),pos(10,21)), no(intersection(identifier('wife',type([['Man', 'Woman']],2),pos(5,9)),join(closure(plus(identifier('mother',type([['Person', 'Woman']],2),pos(5,5)),identifier('father',type([['Person', 'Man']],2),pos(5,4)),type([['Person', 'Woman'], ['Person', 'Man']],2),pos(24,25)),type([['univ', 'univ']],2),pos(15,25)),identifier('mother',type([['Person', 'Woman']],2),pos(5,5)),type([['univ', 'Woman']],2),pos(33,25)),type([['Man', 'Woman']],2),pos(13,25)),type([untyped],0),pos(5,25)), no(intersection(identifier('husband',type([['Woman', 'Man']],2),pos(5,13)),join(closure(plus(identifier('mother',type([['Person', 'Woman']],2),pos(5,5)),identifier('father',type([['Person', 'Man']],2),pos(5,4)),type([['Person', 'Woman'], ['Person', 'Man']],2),pos(27,26)),type([['univ', 'univ']],2),pos(18,26)),identifier('father',type([['Person', 'Man']],2),pos(5,4)),type([['univ', 'Man']],2),pos(36,26)),type([['Woman', 'Man']],2),pos(16,26)),type([untyped],0),pos(5,26)), some(['m'],[field('m',identifier('Man',type([['Man']],1),pos(5,8)),type([['Man']],1),[],pos(17,34))],in(identifier('m',type([['Man']],1),pos(17,34)),fun_call('grandpas',[identifier('m',type([['Man']],1),pos(17,34))],type([['Person']],1),pos(10,35)),type([untyped],0),pos(7,35)),type([untyped],0),pos(1,1))],pos(1,16)),global_scope(-1),exact_scopes([]),bitwidth(-1),pos(1,38))]),functions([function('grandpas',[identifier('p',type([['Person']],1),pos(14,29))],[field('p',identifier('Person',type([['Person']],1),pos(14,3)),type([['Person']],1),[],pos(14,29))],let('parent',plus(plus(plus(identifier('mother',type([['Person', 'Woman']],2),pos(5,5)),identifier('father',type([['Person', 'Man']],2),pos(5,4)),type([['Person', 'Woman'], ['Person', 'Man']],2),pos(25,30)),join(identifier('father',type([['Person', 'Man']],2),pos(5,4)),identifier('wife',type([['Man', 'Woman']],2),pos(5,9)),type([['Person', 'Woman']],2),pos(42,30)),type([['Person', 'Woman'], ['Person', 'Man']],2),pos(34,30)),join(identifier('mother',type([['Person', 'Woman']],2),pos(5,5)),identifier('husband',type([['Woman', 'Man']],2),pos(5,13)),type([['Person', 'Man']],2),pos(56,30)),type([['Person', 'Woman'], ['Person', 'Man']],2),pos(48,30)),intersection(join(join(identifier('p',type([['Person']],1),pos(14,29)),identifier('parent',type([['Person', 'Woman'], ['Person', 'Man']],2),pos(9,30)),type([['Woman'], ['Man']],1),pos(8,31)),identifier('parent',type([['Person', 'Woman'], ['Person', 'Man']],2),pos(9,30)),type([['Woman'], ['Man']],1),pos(15,31)),identifier('Man',type([['Man']],1),pos(5,8)),type([['Man']],1),pos(23,31)),type([['Man']],1),pos(16,30)),pos(1,29)),predicate('ownGrandpa',[identifier('m',type([['Man']],1),pos(17,34))],[field('m',identifier('Man',type([['Man']],1),pos(5,8)),type([['Man']],1),[],pos(17,34))],in(identifier('m',type([['Man']],1),pos(17,34)),fun_call('grandpas',[identifier('m',type([['Man']],1),pos(17,34))],type([['Person']],1),pos(10,35)),type([untyped],0),pos(7,35)),pos(1,34))]),signatures([signature('Person',[field('father',loneof(identifier('Man',type([['Man']],1),pos(5,8)),type([['Man']],1),pos(14,4)),type([['Man']],1),[],pos(5,4)),field('mother',loneof(identifier('Woman',type([['Woman']],1),pos(5,12)),type([['Woman']],1),pos(14,5)),type([['Woman']],1),[],pos(5,5))],[],[abstract],pos(14,3)),signature('Man',[field('wife',loneof(identifier('Woman',type([['Woman']],1),pos(5,12)),type([['Woman']],1),pos(12,9)),type([['Woman']],1),[],pos(5,9))],[],[subsig('Person')],pos(5,8)),signature('Woman',[field('husband',loneof(identifier('Man',type([['Man']],1),pos(5,8)),type([['Man']],1),pos(15,13)),type([['Man']],1),[],pos(5,13))],[],[subsig('Person')],pos(5,12))])) ,
    translate_alloy_model(AlloyTerm,Translated) , 
    Translated == machine(generated(none,abstract_machine(none,machine(none),machine_header(none,alloytranslation,[]),[properties(none,conjunct(none,member(pos(0,0,4,5,0,0),identifier(none,father),partial_function(none,identifier(none,'Person'),identifier(pos(0,0,8,5,0,0),'Man'))),conjunct(none,member(pos(0,0,5,5,0,0),identifier(none,mother),partial_function(none,identifier(none,'Person'),identifier(pos(0,0,12,5,0,0),'Woman'))),conjunct(none,subset(pos(0,0,8,5,0,0),identifier(none,'Man'),identifier(none,'Person')),conjunct(none,member(pos(0,0,9,5,0,0),identifier(none,wife),partial_function(none,identifier(none,'Man'),identifier(pos(0,0,12,5,0,0),'Woman'))),conjunct(none,subset(pos(0,0,12,5,0,0),identifier(none,'Woman'),identifier(none,'Person')),conjunct(none,member(pos(0,0,13,5,0,0),identifier(none,husband),partial_function(none,identifier(none,'Woman'),identifier(pos(0,0,8,5,0,0),'Man'))),conjunct(none,negation(pos(0,0,17,5,0,0),exists(none,[identifier(none,p)],conjunct(none,subset(pos(0,0,17,8,0,0),set_extension(none,[identifier(none,p)]),identifier(pos(0,0,3,14,0,0),'Person')),subset(pos(0,0,17,23,0,0),set_extension(pos(0,0,17,8,0,0),[identifier(none,p)]),image(pos(0,0,17,27,0,0),closure(pos(0,0,17,28,0,0),union(pos(0,0,17,37,0,0),identifier(pos(0,0,5,5,0,0),mother),identifier(pos(0,0,4,5,0,0),father))),set_extension(pos(0,0,17,8,0,0),[identifier(none,p)])))))),conjunct(none,equal(pos(0,0,21,10,0,0),identifier(pos(0,0,9,5,0,0),wife),reverse(pos(0,0,21,12,0,0),identifier(pos(0,0,13,5,0,0),husband))),conjunct(none,conjunct(none,equal(pos(0,0,26,5,0,0),intersection(pos(0,0,26,16,0,0),identifier(pos(0,0,13,5,0,0),husband),composition(pos(0,0,26,36,0,0),reflexive_closure(pos(0,0,26,18,0,0),union(pos(0,0,26,27,0,0),identifier(pos(0,0,5,5,0,0),mother),identifier(pos(0,0,4,5,0,0),father))),identifier(pos(0,0,4,5,0,0),father))),empty_set(none)),equal(pos(0,0,25,5,0,0),intersection(pos(0,0,25,13,0,0),identifier(pos(0,0,9,5,0,0),wife),composition(pos(0,0,25,33,0,0),reflexive_closure(pos(0,0,25,15,0,0),union(pos(0,0,25,24,0,0),identifier(pos(0,0,5,5,0,0),mother),identifier(pos(0,0,4,5,0,0),father))),identifier(pos(0,0,5,5,0,0),mother))),empty_set(none))),conjunct(none,equal(none,identifier(none,'Person'),union(none,identifier(none,'Man'),identifier(none,'Woman'))),conjunct(none,not_equal(none,identifier(none,'Woman'),identifier(none,'Man')),equal(none,card(none,identifier(none,'Person')),integer(none,2)))))))))))))),definitions(none,[predicate_definition(pos(0,0,34,1,0,0),ownGrandpa,[identifier(pos(0,0,34,17,0,0),m)],conjunct(none,subset(pos(0,0,35,7,0,0),identifier(pos(0,0,34,17,0,0),m),definition(pos(0,0,35,10,0,0),grandpas,[identifier(pos(0,0,34,17,0,0),m)])),subset(pos(0,0,34,17,0,0),identifier(none,m),identifier(pos(0,0,8,5,0,0),'Man')))),expression_definition(pos(0,0,29,1,0,0),grandpas,[identifier(pos(0,0,29,14,0,0),p)],comprehension_set(pos(0,0,29,1,0,0),[identifier(none,temp)],conjunct(none,member(none,identifier(none,temp),let_expression(pos(0,0,30,16,0,0),[identifier(none,parent)],equal(pos(0,0,30,16,0,0),identifier(none,parent),union(pos(0,0,30,48,0,0),union(pos(0,0,30,34,0,0),union(pos(0,0,30,25,0,0),identifier(pos(0,0,5,5,0,0),mother),identifier(pos(0,0,4,5,0,0),father)),composition(pos(0,0,30,42,0,0),identifier(pos(0,0,4,5,0,0),father),identifier(pos(0,0,9,5,0,0),wife))),composition(pos(0,0,30,56,0,0),identifier(pos(0,0,5,5,0,0),mother),identifier(pos(0,0,13,5,0,0),husband)))),intersection(pos(0,0,31,23,0,0),image(pos(0,0,31,15,0,0),identifier(pos(0,0,30,9,0,0),parent),image(pos(0,0,31,8,0,0),identifier(pos(0,0,30,9,0,0),parent),set_extension(pos(0,0,29,14,0,0),[identifier(none,p)]))),identifier(pos(0,0,8,5,0,0),'Man')))),subset(pos(0,0,29,14,0,0),set_extension(none,[identifier(none,p)]),identifier(pos(0,0,3,14,0,0),'Person')))))]),operations(none,[operation(pos(0,0,38,1,0,0),identifier(pos(0,0,38,1,0,0),run0),[],[],precondition(pos(0,0,38,1,0,0),conjunct(pos(0,0,38,1,0,0),conjunct(none,truth(none),truth(none)),conjunct(none,exists(pos(0,0,1,1,0,0),[identifier(none,m)],conjunct(none,subset(pos(0,0,34,17,0,0),set_extension(none,[identifier(none,m)]),identifier(pos(0,0,8,5,0,0),'Man')),subset(pos(0,0,35,7,0,0),set_extension(pos(0,0,34,17,0,0),[identifier(none,m)]),definition(pos(0,0,35,10,0,0),grandpas,[identifier(none,m)])))),conjunct(none,equal(pos(0,0,26,5,0,0),intersection(pos(0,0,26,16,0,0),identifier(pos(0,0,13,5,0,0),husband),composition(pos(0,0,26,36,0,0),reflexive_closure(pos(0,0,26,18,0,0),union(pos(0,0,26,27,0,0),identifier(pos(0,0,5,5,0,0),mother),identifier(pos(0,0,4,5,0,0),father))),identifier(pos(0,0,4,5,0,0),father))),empty_set(none)),conjunct(none,equal(pos(0,0,25,5,0,0),intersection(pos(0,0,25,13,0,0),identifier(pos(0,0,9,5,0,0),wife),composition(pos(0,0,25,33,0,0),reflexive_closure(pos(0,0,25,15,0,0),union(pos(0,0,25,24,0,0),identifier(pos(0,0,5,5,0,0),mother),identifier(pos(0,0,4,5,0,0),father))),identifier(pos(0,0,5,5,0,0),mother))),empty_set(none)),conjunct(none,equal(pos(0,0,21,10,0,0),identifier(pos(0,0,9,5,0,0),wife),reverse(pos(0,0,21,12,0,0),identifier(pos(0,0,13,5,0,0),husband))),negation(pos(0,0,17,5,0,0),exists(none,[identifier(none,p)],conjunct(none,subset(pos(0,0,17,8,0,0),set_extension(none,[identifier(none,p)]),identifier(pos(0,0,3,14,0,0),'Person')),subset(pos(0,0,17,23,0,0),set_extension(pos(0,0,17,8,0,0),[identifier(none,p)]),image(pos(0,0,17,27,0,0),closure(pos(0,0,17,28,0,0),union(pos(0,0,17,37,0,0),identifier(pos(0,0,5,5,0,0),mother),identifier(pos(0,0,4,5,0,0),father))),set_extension(pos(0,0,17,8,0,0),[identifier(none,p)]))))))))))),skip(none)))]),constants(none,[identifier(none,husband),identifier(pos(0,0,12,5,0,0),'Woman'),identifier(none,wife),identifier(pos(0,0,8,5,0,0),'Man'),identifier(none,mother),identifier(none,father)]),sets(none,[deferred_set(pos(0,0,3,14,0,0),'Person')])]))).

test(queens2,[]) :-
    AlloyTerm = alloy_model(facts([fact(all(['q', 'q_'],[field('q',oneof(identifier('queen',type([['queen']],1),pos(5,7)),type([['queen']],1),pos(14,17)),type([['queen']],1),[],pos(12,17)), field('q_',oneof(minus(identifier('queen',type([['queen']],1),pos(5,7)),identifier('q',type([['queen']],1),pos(12,17)),type([['queen']],1),pos(30,17)),type([['queen']],1),pos(25,17)),type([['queen']],1),[],pos(21,17))],and([not(equal(join(identifier('q',type([['queen']],1),pos(12,17)),identifier('x',type([['queen', 'Int']],2),pos(13,7)),type([['Int']],1),pos(8,18)),join(identifier('q_',type([['queen']],1),pos(21,17)),identifier('x',type([['queen', 'Int']],2),pos(13,7)),type([['Int']],1),pos(15,18)),type([untyped],0),pos(11,18)),type([untyped],0),pos(5,18)), not(equal(join(identifier('q',type([['queen']],1),pos(12,17)),identifier('y',type([['queen', 'Int']],2),pos(28,7)),type([['Int']],1),pos(8,19)),join(identifier('q_',type([['queen']],1),pos(21,17)),identifier('y',type([['queen', 'Int']],2),pos(28,7)),type([['Int']],1),pos(15,19)),type([untyped],0),pos(11,19)),type([untyped],0),pos(5,19)), not(equal(fun_call('integer_''plus',[join(identifier('q',type([['queen']],1),pos(12,17)),identifier('x',type([['queen', 'Int']],2),pos(13,7)),type([['Int']],1),pos(13,20)), join(identifier('q',type([['queen']],1),pos(12,17)),identifier('y',type([['queen', 'Int']],2),pos(28,7)),type([['Int']],1),pos(17,20))],type([['Int']],1),pos(7,20)),fun_call('integer_''plus',[join(identifier('q_',type([['queen']],1),pos(21,17)),identifier('x',type([['queen', 'Int']],2),pos(13,7)),type([['Int']],1),pos(30,20)), join(identifier('q_',type([['queen']],1),pos(21,17)),identifier('y',type([['queen', 'Int']],2),pos(28,7)),type([['Int']],1),pos(35,20))],type([['Int']],1),pos(23,20)),type([untyped],0),pos(21,20)),type([untyped],0),pos(5,20)), not(equal(fun_call('integer_''plus',[join(identifier('q',type([['queen']],1),pos(12,17)),identifier('x_',type([['queen', 'Int']],2),pos(20,7)),type([['Int']],1),pos(13,21)), join(identifier('q',type([['queen']],1),pos(12,17)),identifier('y',type([['queen', 'Int']],2),pos(28,7)),type([['Int']],1),pos(18,21))],type([['Int']],1),pos(7,21)),fun_call('integer_''plus',[join(identifier('q_',type([['queen']],1),pos(21,17)),identifier('x_',type([['queen', 'Int']],2),pos(20,7)),type([['Int']],1),pos(31,21)), join(identifier('q_',type([['queen']],1),pos(21,17)),identifier('y',type([['queen', 'Int']],2),pos(28,7)),type([['Int']],1),pos(37,21))],type([['Int']],1),pos(24,21)),type([untyped],0),pos(22,21)),type([untyped],0),pos(5,21))],pos(1,1)),type([untyped],0),pos(8,17)),(1,17))]),assertions([]),commands([run(and([all(['q', 'q_'],[field('q',oneof(identifier('queen',type([['queen']],1),pos(5,7)),type([['queen']],1),pos(14,17)),type([['queen']],1),[],pos(12,17)), field('q_',oneof(minus(identifier('queen',type([['queen']],1),pos(5,7)),identifier('q',type([['queen']],1),pos(12,17)),type([['queen']],1),pos(30,17)),type([['queen']],1),pos(25,17)),type([['queen']],1),[],pos(21,17))],and([not(equal(join(identifier('q',type([['queen']],1),pos(12,17)),identifier('x',type([['queen', 'Int']],2),pos(13,7)),type([['Int']],1),pos(8,18)),join(identifier('q_',type([['queen']],1),pos(21,17)),identifier('x',type([['queen', 'Int']],2),pos(13,7)),type([['Int']],1),pos(15,18)),type([untyped],0),pos(11,18)),type([untyped],0),pos(5,18)), not(equal(join(identifier('q',type([['queen']],1),pos(12,17)),identifier('y',type([['queen', 'Int']],2),pos(28,7)),type([['Int']],1),pos(8,19)),join(identifier('q_',type([['queen']],1),pos(21,17)),identifier('y',type([['queen', 'Int']],2),pos(28,7)),type([['Int']],1),pos(15,19)),type([untyped],0),pos(11,19)),type([untyped],0),pos(5,19)), not(equal(fun_call('integer_''plus',[join(identifier('q',type([['queen']],1),pos(12,17)),identifier('x',type([['queen', 'Int']],2),pos(13,7)),type([['Int']],1),pos(13,20)), join(identifier('q',type([['queen']],1),pos(12,17)),identifier('y',type([['queen', 'Int']],2),pos(28,7)),type([['Int']],1),pos(17,20))],type([['Int']],1),pos(7,20)),fun_call('integer_''plus',[join(identifier('q_',type([['queen']],1),pos(21,17)),identifier('x',type([['queen', 'Int']],2),pos(13,7)),type([['Int']],1),pos(30,20)), join(identifier('q_',type([['queen']],1),pos(21,17)),identifier('y',type([['queen', 'Int']],2),pos(28,7)),type([['Int']],1),pos(35,20))],type([['Int']],1),pos(23,20)),type([untyped],0),pos(21,20)),type([untyped],0),pos(5,20)), not(equal(fun_call('integer_''plus',[join(identifier('q',type([['queen']],1),pos(12,17)),identifier('x_',type([['queen', 'Int']],2),pos(20,7)),type([['Int']],1),pos(13,21)), join(identifier('q',type([['queen']],1),pos(12,17)),identifier('y',type([['queen', 'Int']],2),pos(28,7)),type([['Int']],1),pos(18,21))],type([['Int']],1),pos(7,21)),fun_call('integer_''plus',[join(identifier('q_',type([['queen']],1),pos(21,17)),identifier('x_',type([['queen', 'Int']],2),pos(20,7)),type([['Int']],1),pos(31,21)), join(identifier('q_',type([['queen']],1),pos(21,17)),identifier('y',type([['queen', 'Int']],2),pos(28,7)),type([['Int']],1),pos(37,21))],type([['Int']],1),pos(24,21)),type([untyped],0),pos(22,21)),type([untyped],0),pos(5,21))],pos(1,1)),type([untyped],0),pos(8,17))],pos(1,17)),global_scope(-1),exact_scopes([('queen',4)]),bitwidth(5),pos(1,26))]),functions([predicate('show',[],[],boolean(true,pos(11,24)),pos(1,24))]),signatures([signature('queen',[field('x',oneof(identifier('Int',type([['Int']],1),pos(1,1)),type([['Int']],1),pos(15,7)),type([['Int']],1),[],pos(13,7)),field('x_',oneof(identifier('Int',type([['Int']],1),pos(1,1)),type([['Int']],1),pos(23,7)),type([['Int']],1),[],pos(20,7)),field('y',oneof(identifier('Int',type([['Int']],1),pos(1,1)),type([['Int']],1),pos(30,7)),type([['Int']],1),[],pos(28,7))],[and([greater_equal(join(identifier(this,type([['queen']],1),pos(1,1)),identifier('x',type([['queen', 'Int']],2),pos(13,7)),type([['Int']],1),pos(5,8)),integer(1,pos(10,8)),type([untyped],0),pos(7,8)), greater_equal(join(identifier(this,type([['queen']],1),pos(1,1)),identifier('y',type([['queen', 'Int']],2),pos(28,7)),type([['Int']],1),pos(5,9)),integer(1,pos(10,9)),type([untyped],0),pos(7,9)), less_equal(join(identifier(this,type([['queen']],1),pos(1,1)),identifier('x',type([['queen', 'Int']],2),pos(13,7)),type([['Int']],1),pos(5,10)),card(identifier('queen',type([['queen']],1),pos(5,7)),type([['Int']],1),pos(10,10)),type([untyped],0),pos(7,10)), less_equal(join(identifier(this,type([['queen']],1),pos(1,1)),identifier('y',type([['queen', 'Int']],2),pos(28,7)),type([['Int']],1),pos(5,11)),card(identifier('queen',type([['queen']],1),pos(5,7)),type([['Int']],1),pos(10,11)),type([untyped],0),pos(7,11)), greater_equal(join(identifier(this,type([['queen']],1),pos(1,1)),identifier('x_',type([['queen', 'Int']],2),pos(20,7)),type([['Int']],1),pos(5,12)),integer(1,pos(10,12)),type([untyped],0),pos(8,12)), less_equal(join(identifier(this,type([['queen']],1),pos(1,1)),identifier('x_',type([['queen', 'Int']],2),pos(20,7)),type([['Int']],1),pos(5,13)),card(identifier('queen',type([['queen']],1),pos(5,7)),type([['Int']],1),pos(11,13)),type([untyped],0),pos(8,13)), equal(join(identifier(this,type([['queen']],1),pos(1,1)),identifier('x_',type([['queen', 'Int']],2),pos(20,7)),type([['Int']],1),pos(5,14)),fun_call('integer_''minus',[fun_call('integer_''plus',[card(identifier('queen',type([['queen']],1),pos(5,7)),type([['Int']],1),pos(21,14)), integer(1,pos(28,14))],type([['Int']],1),pos(16,14)), join(identifier(this,type([['queen']],1),pos(1,1)),identifier('x',type([['queen', 'Int']],2),pos(13,7)),type([['Int']],1),pos(31,14))],type([['Int']],1),pos(10,14)),type([untyped],0),pos(8,14))],pos(1,1))],[],pos(5,7))])) ,
    translate_alloy_model(AlloyTerm,Translated) , 
    Translated == machine(generated(none,abstract_machine(none,machine(none),machine_header(none,alloytranslation,[]),[properties(none,conjunct(none,member(pos(0,0,7,13,0,0),identifier(none,x),total_function(none,identifier(none,queen),integer_set(pos(0,0,1,1,0,0)))),conjunct(none,member(pos(0,0,7,20,0,0),identifier(none,x_),total_function(none,identifier(none,queen),integer_set(pos(0,0,1,1,0,0)))),conjunct(none,member(pos(0,0,7,28,0,0),identifier(none,y),total_function(none,identifier(none,queen),integer_set(pos(0,0,1,1,0,0)))),conjunct(none,forall(none,[identifier(none,this)],implication(none,subset(none,set_extension(none,[identifier(none,this)]),identifier(none,queen)),conjunct(none,equal(pos(0,0,14,8,0,0),image(pos(0,0,14,5,0,0),identifier(pos(0,0,7,20,0,0),x_),identifier(pos(0,0,1,1,0,0),this)),minus(pos(0,0,14,10,0,0),add(pos(0,0,14,16,0,0),card(pos(0,0,14,21,0,0),identifier(pos(0,0,7,5,0,0),queen)),integer(pos(0,0,14,28,0,0),1)),image(pos(0,0,14,31,0,0),identifier(pos(0,0,7,13,0,0),x),identifier(pos(0,0,1,1,0,0),this)))),conjunct(none,less_equal(pos(0,0,13,8,0,0),image(pos(0,0,13,5,0,0),identifier(pos(0,0,7,20,0,0),x_),identifier(pos(0,0,1,1,0,0),this)),card(pos(0,0,13,11,0,0),identifier(pos(0,0,7,5,0,0),queen))),conjunct(none,greater_equal(pos(0,0,12,8,0,0),image(pos(0,0,12,5,0,0),identifier(pos(0,0,7,20,0,0),x_),identifier(pos(0,0,1,1,0,0),this)),integer(pos(0,0,12,10,0,0),1)),conjunct(none,less_equal(pos(0,0,11,7,0,0),image(pos(0,0,11,5,0,0),identifier(pos(0,0,7,28,0,0),y),identifier(pos(0,0,1,1,0,0),this)),card(pos(0,0,11,10,0,0),identifier(pos(0,0,7,5,0,0),queen))),conjunct(none,less_equal(pos(0,0,10,7,0,0),image(pos(0,0,10,5,0,0),identifier(pos(0,0,7,13,0,0),x),identifier(pos(0,0,1,1,0,0),this)),card(pos(0,0,10,10,0,0),identifier(pos(0,0,7,5,0,0),queen))),conjunct(none,greater_equal(pos(0,0,9,7,0,0),image(pos(0,0,9,5,0,0),identifier(pos(0,0,7,28,0,0),y),identifier(pos(0,0,1,1,0,0),this)),integer(pos(0,0,9,10,0,0),1)),greater_equal(pos(0,0,8,7,0,0),image(pos(0,0,8,5,0,0),identifier(pos(0,0,7,13,0,0),x),identifier(pos(0,0,1,1,0,0),this)),integer(pos(0,0,8,10,0,0),1)))))))))),forall(pos(0,0,17,8,0,0),[identifier(none,q),identifier(none,q_)],implication(none,conjunct(none,subset(pos(0,0,17,21,0,0),set_extension(none,[identifier(none,q_)]),set_subtraction(pos(0,0,17,30,0,0),identifier(pos(0,0,7,5,0,0),queen),set_extension(pos(0,0,17,12,0,0),[identifier(none,q)]))),subset(pos(0,0,17,12,0,0),set_extension(none,[identifier(none,q)]),identifier(pos(0,0,7,5,0,0),queen))),conjunct(none,negation(pos(0,0,21,5,0,0),equal(pos(0,0,21,22,0,0),add(pos(0,0,21,7,0,0),image(pos(0,0,21,13,0,0),identifier(pos(0,0,7,20,0,0),x_),set_extension(pos(0,0,17,12,0,0),[identifier(none,q)])),image(pos(0,0,21,18,0,0),identifier(pos(0,0,7,28,0,0),y),set_extension(pos(0,0,17,12,0,0),[identifier(none,q)]))),add(pos(0,0,21,24,0,0),image(pos(0,0,21,31,0,0),identifier(pos(0,0,7,20,0,0),x_),set_extension(pos(0,0,17,21,0,0),[identifier(none,q_)])),image(pos(0,0,21,37,0,0),identifier(pos(0,0,7,28,0,0),y),set_extension(pos(0,0,17,21,0,0),[identifier(none,q_)]))))),conjunct(none,negation(pos(0,0,20,5,0,0),equal(pos(0,0,20,21,0,0),add(pos(0,0,20,7,0,0),image(pos(0,0,20,13,0,0),identifier(pos(0,0,7,13,0,0),x),set_extension(pos(0,0,17,12,0,0),[identifier(none,q)])),image(pos(0,0,20,17,0,0),identifier(pos(0,0,7,28,0,0),y),set_extension(pos(0,0,17,12,0,0),[identifier(none,q)]))),add(pos(0,0,20,23,0,0),image(pos(0,0,20,30,0,0),identifier(pos(0,0,7,13,0,0),x),set_extension(pos(0,0,17,21,0,0),[identifier(none,q_)])),image(pos(0,0,20,35,0,0),identifier(pos(0,0,7,28,0,0),y),set_extension(pos(0,0,17,21,0,0),[identifier(none,q_)]))))),conjunct(none,negation(pos(0,0,19,5,0,0),equal(pos(0,0,19,11,0,0),image(pos(0,0,19,8,0,0),identifier(pos(0,0,7,28,0,0),y),set_extension(pos(0,0,17,12,0,0),[identifier(none,q)])),image(pos(0,0,19,15,0,0),identifier(pos(0,0,7,28,0,0),y),set_extension(pos(0,0,17,21,0,0),[identifier(none,q_)])))),negation(pos(0,0,18,5,0,0),equal(pos(0,0,18,11,0,0),image(pos(0,0,18,8,0,0),identifier(pos(0,0,7,13,0,0),x),set_extension(pos(0,0,17,12,0,0),[identifier(none,q)])),image(pos(0,0,18,15,0,0),identifier(pos(0,0,7,13,0,0),x),set_extension(pos(0,0,17,21,0,0),[identifier(none,q_)])))))))))))))),definitions(none,[predicate_definition(pos(0,0,24,1,0,0),show,[],boolean_true(pos(0,0,24,11,0,0)))]),operations(none,[operation(pos(0,0,26,1,0,0),identifier(pos(0,0,26,1,0,0),run0),[],[],precondition(pos(0,0,26,1,0,0),conjunct(pos(0,0,26,1,0,0),conjunct(none,equal(none,card(none,identifier(none,queen)),integer(none,4)),truth(none)),forall(pos(0,0,17,8,0,0),[identifier(none,q),identifier(none,q_)],implication(none,conjunct(none,subset(pos(0,0,17,21,0,0),set_extension(none,[identifier(none,q_)]),set_subtraction(pos(0,0,17,30,0,0),identifier(pos(0,0,7,5,0,0),queen),set_extension(pos(0,0,17,12,0,0),[identifier(none,q)]))),subset(pos(0,0,17,12,0,0),set_extension(none,[identifier(none,q)]),identifier(pos(0,0,7,5,0,0),queen))),conjunct(none,negation(pos(0,0,21,5,0,0),equal(pos(0,0,21,22,0,0),add(pos(0,0,21,7,0,0),image(pos(0,0,21,13,0,0),identifier(pos(0,0,7,20,0,0),x_),set_extension(pos(0,0,17,12,0,0),[identifier(none,q)])),image(pos(0,0,21,18,0,0),identifier(pos(0,0,7,28,0,0),y),set_extension(pos(0,0,17,12,0,0),[identifier(none,q)]))),add(pos(0,0,21,24,0,0),image(pos(0,0,21,31,0,0),identifier(pos(0,0,7,20,0,0),x_),set_extension(pos(0,0,17,21,0,0),[identifier(none,q_)])),image(pos(0,0,21,37,0,0),identifier(pos(0,0,7,28,0,0),y),set_extension(pos(0,0,17,21,0,0),[identifier(none,q_)]))))),conjunct(none,negation(pos(0,0,20,5,0,0),equal(pos(0,0,20,21,0,0),add(pos(0,0,20,7,0,0),image(pos(0,0,20,13,0,0),identifier(pos(0,0,7,13,0,0),x),set_extension(pos(0,0,17,12,0,0),[identifier(none,q)])),image(pos(0,0,20,17,0,0),identifier(pos(0,0,7,28,0,0),y),set_extension(pos(0,0,17,12,0,0),[identifier(none,q)]))),add(pos(0,0,20,23,0,0),image(pos(0,0,20,30,0,0),identifier(pos(0,0,7,13,0,0),x),set_extension(pos(0,0,17,21,0,0),[identifier(none,q_)])),image(pos(0,0,20,35,0,0),identifier(pos(0,0,7,28,0,0),y),set_extension(pos(0,0,17,21,0,0),[identifier(none,q_)]))))),conjunct(none,negation(pos(0,0,19,5,0,0),equal(pos(0,0,19,11,0,0),image(pos(0,0,19,8,0,0),identifier(pos(0,0,7,28,0,0),y),set_extension(pos(0,0,17,12,0,0),[identifier(none,q)])),image(pos(0,0,19,15,0,0),identifier(pos(0,0,7,28,0,0),y),set_extension(pos(0,0,17,21,0,0),[identifier(none,q_)])))),negation(pos(0,0,18,5,0,0),equal(pos(0,0,18,11,0,0),image(pos(0,0,18,8,0,0),identifier(pos(0,0,7,13,0,0),x),set_extension(pos(0,0,17,12,0,0),[identifier(none,q)])),image(pos(0,0,18,15,0,0),identifier(pos(0,0,7,13,0,0),x),set_extension(pos(0,0,17,21,0,0),[identifier(none,q_)])))))))))),skip(none)))]),constants(none,[identifier(none,y),identifier(none,x_),identifier(none,x)]),sets(none,[deferred_set(pos(0,0,7,5,0,0),queen)])]))).

test(river_crossing,[]) :-
    AlloyTerm = alloy_model(facts([fact(equal(identifier('eats',type([['Object', 'Object']],2),pos(23,5)),plus(cartesian(identifier('Fox',type([['Fox']],1),pos(17,6)),identifier('Chicken',type([['Chicken']],1),pos(22,6)),type([['Fox', 'Chicken']],2),pos(18,9)),cartesian(identifier('Chicken',type([['Chicken']],1),pos(22,6)),identifier('Grain',type([['Grain']],1),pos(31,6)),type([['Chicken', 'Grain']],2),pos(37,9)),type([['Fox', 'Chicken'], ['Chicken', 'Grain']],2),pos(28,9)),type([untyped],0),pos(13,9)),(1,9)),fact(and([equal(join(fun_call('ordering_''first',[],type(['State'],1),pos(8,15)),identifier('near',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(13,15)),identifier('Object',type([['Object']],1),pos(14,5)),type([untyped],0),pos(19,15)), no(join(fun_call('ordering_''first',[],type(['State'],1),pos(34,15)),identifier('far',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(39,15)),type([untyped],0),pos(31,15))],pos(28,15)),(1,15)),fact(all(['s', 's_'],[field('s',oneof(identifier('State',type([['State']],1),pos(5,12)),type([['State']],1),pos(10,27)),type([['State']],1),[],pos(7,27)), field('s_',oneof(join(identifier('s',type([['State']],1),pos(7,27)),fun_call('ordering_''next',[],type(['State'],2),pos(23,27)),type([['State']],1),pos(22,27)),type([['State']],1),pos(21,27)),type([['State']],1),[],pos(17,27))],if_then_else(in(identifier('Farmer',type([['Farmer']],1),pos(9,6)),join(identifier('s',type([['State']],1),pos(7,27)),identifier('near',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(16,28)),type([untyped],0),pos(12,28)),pred_call('crossRiver',[join(identifier('s',type([['State']],1),pos(7,27)),identifier('near',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(20,29)), join(identifier('s_',type([['State']],1),pos(17,27)),identifier('near',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(29,29)), join(identifier('s',type([['State']],1),pos(7,27)),identifier('far',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(37,29)), join(identifier('s_',type([['State']],1),pos(17,27)),identifier('far',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(45,29))],type([untyped],0),pos(7,29)),pred_call('crossRiver',[join(identifier('s',type([['State']],1),pos(7,27)),identifier('far',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(20,31)), join(identifier('s_',type([['State']],1),pos(17,27)),identifier('far',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(28,31)), join(identifier('s',type([['State']],1),pos(7,27)),identifier('near',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(35,31)), join(identifier('s_',type([['State']],1),pos(17,27)),identifier('near',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(44,31))],type([untyped],0),pos(7,31)),type([untyped],0),pos(22,28)),type([untyped],0),pos(3,27)),(1,26))]),assertions([]),commands([run(and([equal(identifier('eats',type([['Object', 'Object']],2),pos(23,5)),plus(cartesian(identifier('Fox',type([['Fox']],1),pos(17,6)),identifier('Chicken',type([['Chicken']],1),pos(22,6)),type([['Fox', 'Chicken']],2),pos(18,9)),cartesian(identifier('Chicken',type([['Chicken']],1),pos(22,6)),identifier('Grain',type([['Grain']],1),pos(31,6)),type([['Chicken', 'Grain']],2),pos(37,9)),type([['Fox', 'Chicken'], ['Chicken', 'Grain']],2),pos(28,9)),type([untyped],0),pos(13,9)), equal(join(fun_call('ordering_''first',[],type(['State'],1),pos(8,15)),identifier('near',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(13,15)),identifier('Object',type([['Object']],1),pos(14,5)),type([untyped],0),pos(19,15)), no(join(fun_call('ordering_''first',[],type(['State'],1),pos(34,15)),identifier('far',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(39,15)),type([untyped],0),pos(31,15)), all(['s', 's_'],[field('s',oneof(identifier('State',type([['State']],1),pos(5,12)),type([['State']],1),pos(10,27)),type([['State']],1),[],pos(7,27)), field('s_',oneof(join(identifier('s',type([['State']],1),pos(7,27)),fun_call('ordering_''next',[],type(['State'],2),pos(23,27)),type([['State']],1),pos(22,27)),type([['State']],1),pos(21,27)),type([['State']],1),[],pos(17,27))],if_then_else(in(identifier('Farmer',type([['Farmer']],1),pos(9,6)),join(identifier('s',type([['State']],1),pos(7,27)),identifier('near',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(16,28)),type([untyped],0),pos(12,28)),pred_call('crossRiver',[join(identifier('s',type([['State']],1),pos(7,27)),identifier('near',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(20,29)), join(identifier('s_',type([['State']],1),pos(17,27)),identifier('near',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(29,29)), join(identifier('s',type([['State']],1),pos(7,27)),identifier('far',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(37,29)), join(identifier('s_',type([['State']],1),pos(17,27)),identifier('far',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(45,29))],type([untyped],0),pos(7,29)),pred_call('crossRiver',[join(identifier('s',type([['State']],1),pos(7,27)),identifier('far',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(20,31)), join(identifier('s_',type([['State']],1),pos(17,27)),identifier('far',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(28,31)), join(identifier('s',type([['State']],1),pos(7,27)),identifier('near',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(35,31)), join(identifier('s_',type([['State']],1),pos(17,27)),identifier('near',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(44,31))],type([untyped],0),pos(7,31)),type([untyped],0),pos(22,28)),type([untyped],0),pos(3,27)), equal(join(fun_call('ordering_''last',[],type(['State'],1),pos(7,36)),identifier('far',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(11,36)),identifier('Object',type([['Object']],1),pos(14,5)),type([untyped],0),pos(15,36))],pos(1,9)),global_scope(-1),exact_scopes([('State',8)]),bitwidth(-1),pos(1,36))]),functions([predicate('crossRiver',[identifier('from',type([['Object']],1),pos(18,18)), identifier('from_',type([['Object']],1),pos(24,18)), identifier('to',type([['Object']],1),pos(31,18)), identifier('to_',type([['Object']],1),pos(35,18))],[field('from',setof(identifier('Object',type([['Object']],1),pos(14,5)),type([['Object']],1),pos(40,18)),type([['Object']],1),[],pos(18,18)),field('from_',setof(identifier('Object',type([['Object']],1),pos(14,5)),type([['Object']],1),pos(40,18)),type([['Object']],1),[],pos(18,18)),field('to',setof(identifier('Object',type([['Object']],1),pos(14,5)),type([['Object']],1),pos(40,18)),type([['Object']],1),[],pos(18,18)),field('to_',setof(identifier('Object',type([['Object']],1),pos(14,5)),type([['Object']],1),pos(40,18)),type([['Object']],1),[],pos(18,18))],one(['x'],[field('x',oneof(identifier('from',type([['Object']],1),pos(18,18)),type([['Object']],1),pos(10,19)),type([['Object']],1),[],pos(7,19))],and([equal(identifier('from_',type([['Object']],1),pos(24,18)),minus(minus(minus(identifier('from',type([['Object']],1),pos(18,18)),identifier('x',type([['Object']],1),pos(7,19)),type([['Object']],1),pos(18,20)),identifier('Farmer',type([['Farmer']],1),pos(9,6)),type([['Object']],1),pos(22,20)),join(identifier('from_',type([['Object']],1),pos(24,18)),identifier('eats',type([['Object', 'Object']],2),pos(23,5)),type([['Object']],1),pos(38,20)),type([['Object']],1),pos(31,20)),type([untyped],0),pos(11,20)), equal(identifier('to_',type([['Object']],1),pos(35,18)),plus(plus(identifier('to',type([['Object']],1),pos(31,18)),identifier('x',type([['Object']],1),pos(7,19)),type([['Object']],1),pos(14,21)),identifier('Farmer',type([['Farmer']],1),pos(9,6)),type([['Object']],1),pos(18,21)),type([untyped],0),pos(9,21))],pos(1,1)),type([untyped],0),pos(3,19)),pos(1,18)),predicate('run$1',[],[],equal(join(fun_call('ordering_''last',[],type(['State'],1),pos(7,36)),identifier('far',type([['State', 'Object']],2),pos(13,12)),type([['Object']],1),pos(11,36)),identifier('Object',type([['Object']],1),pos(14,5)),type([untyped],0),pos(15,36)),pos(1,36))]),signatures([signature('Object',[field('eats',setof(identifier('Object',type([['Object']],1),pos(14,5)),type([['Object']],1),pos(29,5)),type([['Object']],1),[],pos(23,5))],[],[abstract],pos(14,5)),signature('Farmer',[],[],[one, subsig('Object')],pos(9,6)),signature('Fox',[],[],[one, subsig('Object')],pos(17,6)),signature('Chicken',[],[],[one, subsig('Object')],pos(22,6)),signature('Grain',[],[],[one, subsig('Object')],pos(31,6)),signature('State',[field('near',setof(identifier('Object',type([['Object']],1),pos(14,5)),type([['Object']],1),pos(24,12)),type([['Object']],1),[],pos(13,12)),field('far',setof(identifier('Object',type([['Object']],1),pos(14,5)),type([['Object']],1),pos(24,12)),type([['Object']],1),[],pos(13,12))],[],[ordered],pos(5,12))])) ,
    translate_alloy_model(AlloyTerm,Translated) , 
    Translated == machine(generated(none,abstract_machine(none,machine(none),machine_header(none,alloytranslation,[]),[properties(none,conjunct(none,member(pos(0,0,5,23,0,0),identifier(none,eats),relations(none,identifier(none,'Object'),identifier(pos(0,0,5,14,0,0),'Object'))),conjunct(none,subset(pos(0,0,6,9,0,0),set_extension(none,[identifier(none,'Farmer')]),identifier(none,'Object')),conjunct(none,subset(pos(0,0,6,17,0,0),set_extension(none,[identifier(none,'Fox')]),identifier(none,'Object')),conjunct(none,subset(pos(0,0,6,22,0,0),set_extension(none,[identifier(none,'Chicken')]),identifier(none,'Object')),conjunct(none,subset(pos(0,0,6,31,0,0),set_extension(none,[identifier(none,'Grain')]),identifier(none,'Object')),conjunct(none,member(none,identifier(none,'State'),pow_subset(none,integer_set(none))),conjunct(none,member(pos(0,0,12,13,0,0),identifier(none,near),relations(none,identifier(none,'State'),identifier(pos(0,0,5,14,0,0),'Object'))),conjunct(none,member(pos(0,0,12,13,0,0),identifier(none,far),relations(none,identifier(none,'State'),identifier(pos(0,0,5,14,0,0),'Object'))),conjunct(none,equal(pos(0,0,9,13,0,0),identifier(pos(0,0,5,23,0,0),eats),union(pos(0,0,9,28,0,0),cartesian_product(pos(0,0,9,18,0,0),set_extension(pos(0,0,6,17,0,0),[identifier(none,'Fox')]),set_extension(pos(0,0,6,22,0,0),[identifier(none,'Chicken')])),cartesian_product(pos(0,0,9,37,0,0),set_extension(pos(0,0,6,22,0,0),[identifier(none,'Chicken')]),set_extension(pos(0,0,6,31,0,0),[identifier(none,'Grain')])))),conjunct(none,conjunct(none,equal(pos(0,0,15,31,0,0),image(pos(0,0,15,39,0,0),identifier(pos(0,0,12,13,0,0),far),set_extension(pos(0,0,15,39,0,0),[min(pos(0,0,15,34,0,0),identifier(none,'State'))])),empty_set(none)),equal(pos(0,0,15,19,0,0),image(pos(0,0,15,13,0,0),identifier(pos(0,0,12,13,0,0),near),set_extension(pos(0,0,15,13,0,0),[min(pos(0,0,15,8,0,0),identifier(none,'State'))])),identifier(pos(0,0,5,14,0,0),'Object'))),conjunct(none,forall(pos(0,0,27,3,0,0),[identifier(none,s),identifier(none,s_)],implication(none,conjunct(none,subset(pos(0,0,27,17,0,0),set_extension(none,[identifier(none,s_)]),definition(pos(0,0,27,23,0,0),next_State,[identifier(none,s)])),subset(pos(0,0,27,7,0,0),set_extension(none,[identifier(none,s)]),identifier(pos(0,0,12,5,0,0),'State'))),conjunct(pos(0,0,28,22,0,0),implication(pos(0,0,28,22,0,0),subset(pos(0,0,28,12,0,0),set_extension(pos(0,0,6,9,0,0),[identifier(none,'Farmer')]),image(pos(0,0,28,16,0,0),identifier(pos(0,0,12,13,0,0),near),set_extension(pos(0,0,27,7,0,0),[identifier(none,s)]))),definition(pos(0,0,29,7,0,0),crossRiver,[image(pos(0,0,29,20,0,0),identifier(pos(0,0,12,13,0,0),near),set_extension(pos(0,0,27,7,0,0),[identifier(none,s)])),image(pos(0,0,29,29,0,0),identifier(pos(0,0,12,13,0,0),near),set_extension(pos(0,0,27,17,0,0),[identifier(none,s_)])),image(pos(0,0,29,37,0,0),identifier(pos(0,0,12,13,0,0),far),set_extension(pos(0,0,27,7,0,0),[identifier(none,s)])),image(pos(0,0,29,45,0,0),identifier(pos(0,0,12,13,0,0),far),set_extension(pos(0,0,27,17,0,0),[identifier(none,s_)]))])),implication(pos(0,0,28,22,0,0),negation(pos(0,0,28,22,0,0),subset(pos(0,0,28,12,0,0),set_extension(pos(0,0,6,9,0,0),[identifier(none,'Farmer')]),image(pos(0,0,28,16,0,0),identifier(pos(0,0,12,13,0,0),near),set_extension(pos(0,0,27,7,0,0),[identifier(none,s)])))),definition(pos(0,0,31,7,0,0),crossRiver,[image(pos(0,0,31,20,0,0),identifier(pos(0,0,12,13,0,0),far),set_extension(pos(0,0,27,7,0,0),[identifier(none,s)])),image(pos(0,0,31,28,0,0),identifier(pos(0,0,12,13,0,0),far),set_extension(pos(0,0,27,17,0,0),[identifier(none,s_)])),image(pos(0,0,31,35,0,0),identifier(pos(0,0,12,13,0,0),near),set_extension(pos(0,0,27,7,0,0),[identifier(none,s)])),image(pos(0,0,31,44,0,0),identifier(pos(0,0,12,13,0,0),near),set_extension(pos(0,0,27,17,0,0),[identifier(none,s_)]))]))))),conjunct(none,equal(none,identifier(none,'Object'),union(none,set_extension(none,[identifier(none,'Farmer')]),union(none,set_extension(none,[identifier(none,'Fox')]),union(none,set_extension(none,[identifier(none,'Chicken')]),set_extension(none,[identifier(none,'Grain')]))))),conjunct(none,conjunct(none,not_equal(none,set_extension(none,[identifier(none,'Fox')]),set_extension(none,[identifier(none,'Farmer')])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,'Chicken')]),set_extension(none,[identifier(none,'Farmer')])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,'Chicken')]),set_extension(none,[identifier(none,'Fox')])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,'Grain')]),set_extension(none,[identifier(none,'Farmer')])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,'Grain')]),set_extension(none,[identifier(none,'Fox')])),not_equal(none,set_extension(none,[identifier(none,'Grain')]),set_extension(none,[identifier(none,'Chicken')]))))))),equal(none,card(none,identifier(none,'Object')),integer(none,4)))))))))))))))),definitions(none,[predicate_definition(pos(0,0,36,1,0,0),'run$1',[],equal(pos(0,0,36,15,0,0),image(pos(0,0,36,11,0,0),identifier(pos(0,0,12,13,0,0),far),set_extension(pos(0,0,36,11,0,0),[max(pos(0,0,36,7,0,0),identifier(none,'State'))])),identifier(pos(0,0,5,14,0,0),'Object'))),predicate_definition(pos(0,0,18,1,0,0),crossRiver,[identifier(pos(0,0,18,18,0,0),from),identifier(pos(0,0,18,24,0,0),from_),identifier(pos(0,0,18,31,0,0),to),identifier(pos(0,0,18,35,0,0),to_)],conjunct(none,equal(pos(0,0,19,3,0,0),card(none,comprehension_set(none,[identifier(none,x)],conjunct(none,subset(pos(0,0,19,7,0,0),set_extension(none,[identifier(none,x)]),identifier(pos(0,0,18,18,0,0),from)),conjunct(none,equal(pos(0,0,21,9,0,0),identifier(pos(0,0,18,35,0,0),to_),union(pos(0,0,21,18,0,0),union(pos(0,0,21,14,0,0),identifier(pos(0,0,18,31,0,0),to),set_extension(pos(0,0,19,7,0,0),[identifier(none,x)])),set_extension(pos(0,0,6,9,0,0),[identifier(none,'Farmer')]))),equal(pos(0,0,20,11,0,0),identifier(pos(0,0,18,24,0,0),from_),set_subtraction(pos(0,0,20,31,0,0),set_subtraction(pos(0,0,20,22,0,0),set_subtraction(pos(0,0,20,18,0,0),identifier(pos(0,0,18,18,0,0),from),set_extension(pos(0,0,19,7,0,0),[identifier(none,x)])),set_extension(pos(0,0,6,9,0,0),[identifier(none,'Farmer')])),image(pos(0,0,20,38,0,0),identifier(pos(0,0,5,23,0,0),eats),identifier(pos(0,0,18,24,0,0),from_)))))))),integer(none,1)),conjunct(none,subset(pos(0,0,18,18,0,0),identifier(none,to_),identifier(pos(0,0,5,14,0,0),'Object')),conjunct(none,subset(pos(0,0,18,18,0,0),identifier(none,to),identifier(pos(0,0,5,14,0,0),'Object')),conjunct(none,subset(pos(0,0,18,18,0,0),identifier(none,from_),identifier(pos(0,0,5,14,0,0),'Object')),subset(pos(0,0,18,18,0,0),identifier(none,from),identifier(pos(0,0,5,14,0,0),'Object'))))))),expression_definition(pos(0,0,12,5,0,0),prevs_State,[identifier(pos(0,0,12,5,0,0),s)],comprehension_set(pos(0,0,12,5,0,0),[identifier(pos(0,0,12,5,0,0),x)],conjunct(pos(0,0,12,5,0,0),less(pos(0,0,12,5,0,0),identifier(pos(0,0,12,5,0,0),x),identifier(pos(0,0,12,5,0,0),s)),member(pos(0,0,12,5,0,0),identifier(pos(0,0,12,5,0,0),x),identifier(none,'State'))))),expression_definition(pos(0,0,12,5,0,0),prev_State,[identifier(pos(0,0,12,5,0,0),s)],comprehension_set(pos(0,0,12,5,0,0),[identifier(pos(0,0,12,5,0,0),x)],conjunct(pos(0,0,12,5,0,0),equal(pos(0,0,12,5,0,0),identifier(pos(0,0,12,5,0,0),x),minus(pos(0,0,12,5,0,0),identifier(pos(0,0,12,5,0,0),s),integer(pos(0,0,12,5,0,0),1))),member(pos(0,0,12,5,0,0),identifier(pos(0,0,12,5,0,0),x),identifier(none,'State'))))),expression_definition(pos(0,0,12,5,0,0),nexts_State,[identifier(pos(0,0,12,5,0,0),s)],comprehension_set(pos(0,0,12,5,0,0),[identifier(pos(0,0,12,5,0,0),x)],conjunct(pos(0,0,12,5,0,0),greater(pos(0,0,12,5,0,0),identifier(pos(0,0,12,5,0,0),x),identifier(pos(0,0,12,5,0,0),s)),member(pos(0,0,12,5,0,0),identifier(pos(0,0,12,5,0,0),x),identifier(none,'State'))))),expression_definition(pos(0,0,12,5,0,0),next_State,[identifier(pos(0,0,12,5,0,0),s)],comprehension_set(pos(0,0,12,5,0,0),[identifier(pos(0,0,12,5,0,0),x)],conjunct(pos(0,0,12,5,0,0),equal(pos(0,0,12,5,0,0),identifier(pos(0,0,12,5,0,0),x),add(pos(0,0,12,5,0,0),identifier(pos(0,0,12,5,0,0),s),integer(pos(0,0,12,5,0,0),1))),member(pos(0,0,12,5,0,0),identifier(pos(0,0,12,5,0,0),x),identifier(none,'State')))))]),operations(none,[operation(pos(0,0,36,1,0,0),identifier(pos(0,0,36,1,0,0),run0),[],[],precondition(pos(0,0,36,1,0,0),conjunct(pos(0,0,36,1,0,0),conjunct(none,equal(none,identifier(none,'State'),interval(none,integer(none,0),integer(none,7))),truth(none)),conjunct(none,equal(pos(0,0,36,15,0,0),image(pos(0,0,36,11,0,0),identifier(pos(0,0,12,13,0,0),far),set_extension(pos(0,0,36,11,0,0),[max(pos(0,0,36,7,0,0),identifier(none,'State'))])),identifier(pos(0,0,5,14,0,0),'Object')),conjunct(none,forall(pos(0,0,27,3,0,0),[identifier(none,s),identifier(none,s_)],implication(none,conjunct(none,subset(pos(0,0,27,17,0,0),set_extension(none,[identifier(none,s_)]),definition(pos(0,0,27,23,0,0),next_State,[identifier(none,s)])),subset(pos(0,0,27,7,0,0),set_extension(none,[identifier(none,s)]),identifier(pos(0,0,12,5,0,0),'State'))),conjunct(pos(0,0,28,22,0,0),implication(pos(0,0,28,22,0,0),subset(pos(0,0,28,12,0,0),set_extension(pos(0,0,6,9,0,0),[identifier(none,'Farmer')]),image(pos(0,0,28,16,0,0),identifier(pos(0,0,12,13,0,0),near),set_extension(pos(0,0,27,7,0,0),[identifier(none,s)]))),definition(pos(0,0,29,7,0,0),crossRiver,[image(pos(0,0,29,20,0,0),identifier(pos(0,0,12,13,0,0),near),set_extension(pos(0,0,27,7,0,0),[identifier(none,s)])),image(pos(0,0,29,29,0,0),identifier(pos(0,0,12,13,0,0),near),set_extension(pos(0,0,27,17,0,0),[identifier(none,s_)])),image(pos(0,0,29,37,0,0),identifier(pos(0,0,12,13,0,0),far),set_extension(pos(0,0,27,7,0,0),[identifier(none,s)])),image(pos(0,0,29,45,0,0),identifier(pos(0,0,12,13,0,0),far),set_extension(pos(0,0,27,17,0,0),[identifier(none,s_)]))])),implication(pos(0,0,28,22,0,0),negation(pos(0,0,28,22,0,0),subset(pos(0,0,28,12,0,0),set_extension(pos(0,0,6,9,0,0),[identifier(none,'Farmer')]),image(pos(0,0,28,16,0,0),identifier(pos(0,0,12,13,0,0),near),set_extension(pos(0,0,27,7,0,0),[identifier(none,s)])))),definition(pos(0,0,31,7,0,0),crossRiver,[image(pos(0,0,31,20,0,0),identifier(pos(0,0,12,13,0,0),far),set_extension(pos(0,0,27,7,0,0),[identifier(none,s)])),image(pos(0,0,31,28,0,0),identifier(pos(0,0,12,13,0,0),far),set_extension(pos(0,0,27,17,0,0),[identifier(none,s_)])),image(pos(0,0,31,35,0,0),identifier(pos(0,0,12,13,0,0),near),set_extension(pos(0,0,27,7,0,0),[identifier(none,s)])),image(pos(0,0,31,44,0,0),identifier(pos(0,0,12,13,0,0),near),set_extension(pos(0,0,27,17,0,0),[identifier(none,s_)]))]))))),conjunct(none,equal(pos(0,0,15,31,0,0),image(pos(0,0,15,39,0,0),identifier(pos(0,0,12,13,0,0),far),set_extension(pos(0,0,15,39,0,0),[min(pos(0,0,15,34,0,0),identifier(none,'State'))])),empty_set(none)),conjunct(none,equal(pos(0,0,15,19,0,0),image(pos(0,0,15,13,0,0),identifier(pos(0,0,12,13,0,0),near),set_extension(pos(0,0,15,13,0,0),[min(pos(0,0,15,8,0,0),identifier(none,'State'))])),identifier(pos(0,0,5,14,0,0),'Object')),equal(pos(0,0,9,13,0,0),identifier(pos(0,0,5,23,0,0),eats),union(pos(0,0,9,28,0,0),cartesian_product(pos(0,0,9,18,0,0),set_extension(pos(0,0,6,17,0,0),[identifier(none,'Fox')]),set_extension(pos(0,0,6,22,0,0),[identifier(none,'Chicken')])),cartesian_product(pos(0,0,9,37,0,0),set_extension(pos(0,0,6,22,0,0),[identifier(none,'Chicken')]),set_extension(pos(0,0,6,31,0,0),[identifier(none,'Grain')]))))))))),skip(none)))]),constants(none,[identifier(none,far),identifier(none,near),identifier(pos(0,0,12,5,0,0),'State'),identifier(pos(0,0,6,31,0,0),'Grain'),identifier(pos(0,0,6,22,0,0),'Chicken'),identifier(pos(0,0,6,17,0,0),'Fox'),identifier(pos(0,0,6,9,0,0),'Farmer'),identifier(none,eats)]),sets(none,[deferred_set(pos(0,0,5,14,0,0),'Object')])]))).

test(crewalloc,[]) :-
    AlloyTerm = alloy_model(facts([fact(equal(identifier('male',type([['Personell']],1),pos(5,7)),plus(plus(identifier('tom',type([['tom']],1),pos(9,6)),identifier('david',type([['david']],1),pos(14,6)),type([['tom'], ['david']],1),pos(13,13)),identifier('jeremy',type([['jeremy']],1),pos(21,6)),type([['tom'], ['david'], ['jeremy']],1),pos(19,13)),type([untyped],0),pos(8,13)),(1,12)),fact(equal(identifier('speaks',type([['Personell', 'Language']],2),pos(26,5)),plus(plus(plus(plus(plus(cartesian(identifier('tom',type([['tom']],1),pos(9,6)),identifier('german',type([['german']],1),pos(17,4)),type([['tom', 'german']],2),pos(14,16)),cartesian(identifier('david',type([['david']],1),pos(14,6)),identifier('french',type([['french']],1),pos(9,4)),type([['david', 'french']],2),pos(30,16)),type([['tom', 'german'], ['david', 'french']],2),pos(23,16)),cartesian(identifier('jeremy',type([['jeremy']],1),pos(21,6)),identifier('german',type([['german']],1),pos(17,4)),type([['jeremy', 'german']],2),pos(47,16)),type([['tom', 'german'], ['david', 'french'], ['jeremy', 'german']],2),pos(39,16)),cartesian(identifier('carol',type([['carol']],1),pos(29,6)),identifier('spanish',type([['spanish']],1),pos(25,4)),type([['carol', 'spanish']],2),pos(63,16)),type([['tom', 'german'], ['david', 'french'], ['jeremy', 'german'], ['carol', 'spanish']],2),pos(56,16)),cartesian(identifier('janet',type([['janet']],1),pos(36,6)),identifier('french',type([['french']],1),pos(9,4)),type([['janet', 'french']],2),pos(80,16)),type([['tom', 'german'], ['david', 'french'], ['jeremy', 'german'], ['carol', 'spanish'], ['janet', 'french']],2),pos(73,16)),cartesian(identifier('tracy',type([['tracy']],1),pos(43,6)),identifier('spanish',type([['spanish']],1),pos(25,4)),type([['tracy', 'spanish']],2),pos(96,16)),type([['tom', 'german'], ['david', 'french'], ['jeremy', 'german'], ['carol', 'spanish'], ['janet', 'french'], ['tracy', 'spanish']],2),pos(89,16)),type([untyped],0),pos(10,16)),(1,15))]),assertions([]),commands([run(and([equal(identifier('male',type([['Personell']],1),pos(5,7)),plus(plus(identifier('tom',type([['tom']],1),pos(9,6)),identifier('david',type([['david']],1),pos(14,6)),type([['tom'], ['david']],1),pos(13,13)),identifier('jeremy',type([['jeremy']],1),pos(21,6)),type([['tom'], ['david'], ['jeremy']],1),pos(19,13)),type([untyped],0),pos(8,13)), equal(identifier('speaks',type([['Personell', 'Language']],2),pos(26,5)),plus(plus(plus(plus(plus(cartesian(identifier('tom',type([['tom']],1),pos(9,6)),identifier('german',type([['german']],1),pos(17,4)),type([['tom', 'german']],2),pos(14,16)),cartesian(identifier('david',type([['david']],1),pos(14,6)),identifier('french',type([['french']],1),pos(9,4)),type([['david', 'french']],2),pos(30,16)),type([['tom', 'german'], ['david', 'french']],2),pos(23,16)),cartesian(identifier('jeremy',type([['jeremy']],1),pos(21,6)),identifier('german',type([['german']],1),pos(17,4)),type([['jeremy', 'german']],2),pos(47,16)),type([['tom', 'german'], ['david', 'french'], ['jeremy', 'german']],2),pos(39,16)),cartesian(identifier('carol',type([['carol']],1),pos(29,6)),identifier('spanish',type([['spanish']],1),pos(25,4)),type([['carol', 'spanish']],2),pos(63,16)),type([['tom', 'german'], ['david', 'french'], ['jeremy', 'german'], ['carol', 'spanish']],2),pos(56,16)),cartesian(identifier('janet',type([['janet']],1),pos(36,6)),identifier('french',type([['french']],1),pos(9,4)),type([['janet', 'french']],2),pos(80,16)),type([['tom', 'german'], ['david', 'french'], ['jeremy', 'german'], ['carol', 'spanish'], ['janet', 'french']],2),pos(73,16)),cartesian(identifier('tracy',type([['tracy']],1),pos(43,6)),identifier('spanish',type([['spanish']],1),pos(25,4)),type([['tracy', 'spanish']],2),pos(96,16)),type([['tom', 'german'], ['david', 'french'], ['jeremy', 'german'], ['carol', 'spanish'], ['janet', 'french'], ['tracy', 'spanish']],2),pos(89,16)),type([untyped],0),pos(10,16)), pred_call('allLanguages',[],type([untyped],0),pos(3,31)), pred_call('allSexes',[],type([untyped],0),pos(20,31)), pred_call('scheduleOk',[],type([untyped],0),pos(33,31)), pred_call('everybodyInSchedule',[],type([untyped],0),pos(48,31))],pos(1,12)),global_scope(-1),exact_scopes([]),bitwidth(-1),pos(1,34))]),functions([predicate('allLanguages',[],[],all(['f'],[field('f',oneof(identifier('Flight',type([['Flight']],1),pos(5,8)),type([['Flight']],1),pos(9,19)),type([['Flight']],1),[],pos(7,19))],equal(join(join(identifier('f',type([['Flight']],1),pos(7,19)),identifier('assign',type([['Flight', 'Personell']],2),pos(3,9)),type([['Personell']],1),pos(19,19)),identifier('speaks',type([['Personell', 'Language']],2),pos(26,5)),type([['Language']],1),pos(26,19)),identifier('Language',type([['Language']],1),pos(14,3)),type([untyped],0),pos(34,19)),type([untyped],0),pos(3,19)),pos(1,18)),predicate('allSexes',[],[],all(['f'],[field('f',oneof(identifier('Flight',type([['Flight']],1),pos(5,8)),type([['Flight']],1),pos(9,22)),type([['Flight']],1),[],pos(7,22))],and([some(minus(join(identifier('f',type([['Flight']],1),pos(7,22)),identifier('assign',type([['Flight', 'Personell']],2),pos(3,9)),type([['Personell']],1),pos(25,22)),identifier('male',type([['Personell']],1),pos(5,7)),type([['Personell']],1),pos(32,22)),type([untyped],0),pos(18,22)), some(intersection(join(identifier('f',type([['Flight']],1),pos(7,22)),identifier('assign',type([['Flight', 'Personell']],2),pos(3,9)),type([['Personell']],1),pos(50,22)),identifier('male',type([['Personell']],1),pos(5,7)),type([['Personell']],1),pos(58,22)),type([untyped],0),pos(43,22))],pos(39,22)),type([untyped],0),pos(3,22)),pos(1,21)),predicate('scheduleOk',[],[],all(['p', 'f'],[field('p',oneof(identifier('Personell',type([['Personell']],1),pos(14,5)),type([['Personell']],1),pos(9,25)),type([['Personell']],1),[],pos(7,25)), field('f',oneof(identifier('Flight',type([['Flight']],1),pos(5,8)),type([['Flight']],1),pos(24,25)),type([['Flight']],1),[],pos(20,25))],implication(and([in(identifier('p',type([['Personell']],1),pos(7,25)),join(identifier('f',type([['Flight']],1),pos(20,25)),identifier('assign',type([['Flight', 'Personell']],2),pos(3,9)),type([['Personell']],1),pos(39,25)),type([untyped],0),pos(35,25)), in(identifier('p',type([['Personell']],1),pos(7,25)),join(join(identifier('f',type([['Flight']],1),pos(20,25)),fun_call('ordering_''next',[],type(['Flight'],2),pos(56,25)),type([['Flight']],1),pos(56,25)),identifier('assign',type([['Flight', 'Personell']],2),pos(3,9)),type([['Personell']],1),pos(63,25)),type([untyped],0),pos(53,25))],pos(47,25)),not(in(identifier('p',type([['Personell']],1),pos(7,25)),join(join(join(identifier('f',type([['Flight']],1),pos(20,25)),fun_call('ordering_''next',[],type(['Flight'],2),pos(89,25)),type([['Flight']],1),pos(89,25)),fun_call('ordering_''next',[],type(['Flight'],2),pos(84,25)),type([['Flight']],1),pos(84,25)),identifier('assign',type([['Flight', 'Personell']],2),pos(3,9)),type([['Personell']],1),pos(97,25)),type([untyped],0),pos(81,25)),type([untyped],0),pos(74,25)),type([untyped],0),pos(71,25)),type([untyped],0),pos(3,25)),pos(1,24)),predicate('everybodyInSchedule',[],[],equal(join(identifier('univ',type([['univ']],1),pos(1,1)),identifier('assign',type([['Flight', 'Personell']],2),pos(3,9)),type([['Personell']],1),pos(7,28)),identifier('Personell',type([['Personell']],1),pos(14,5)),type([untyped],0),pos(15,28)),pos(1,27)),predicate('crewAlloc',[],[],and([pred_call('allLanguages',[],type([untyped],0),pos(3,31)), pred_call('allSexes',[],type([untyped],0),pos(20,31)), pred_call('scheduleOk',[],type([untyped],0),pos(33,31)), pred_call('everybodyInSchedule',[],type([untyped],0),pos(48,31))],pos(44,31)),pos(1,30))]),signatures([signature('Language',[],[],[abstract],pos(14,3)),signature('french',[],[],[one, subsig('Language')],pos(9,4)),signature('german',[],[],[one, subsig('Language')],pos(17,4)),signature('spanish',[],[],[one, subsig('Language')],pos(25,4)),signature('Personell',[field('speaks',setof(identifier('Language',type([['Language']],1),pos(14,3)),type([['Language']],1),pos(35,5)),type([['Language']],1),[],pos(26,5))],[],[abstract],pos(14,5)),signature('tom',[],[],[one, subsig('Personell')],pos(9,6)),signature('david',[],[],[one, subsig('Personell')],pos(14,6)),signature('jeremy',[],[],[one, subsig('Personell')],pos(21,6)),signature('carol',[],[],[one, subsig('Personell')],pos(29,6)),signature('janet',[],[],[one, subsig('Personell')],pos(36,6)),signature('tracy',[],[],[one, subsig('Personell')],pos(43,6)),signature('male',[],[],[subset(['Personell'])],pos(5,7)),signature('Flight',[field('assign',setof(identifier('Personell',type([['Personell']],1),pos(14,5)),type([['Personell']],1),pos(12,9)),type([['Personell']],1),[],pos(3,9))],[],[ordered],pos(5,8))])) ,
    translate_alloy_model(AlloyTerm,Translated) , 
    Translated == machine(generated(none,abstract_machine(none,machine(none),machine_header(none,alloytranslation,[]),[properties(none,conjunct(none,subset(pos(0,0,4,9,0,0),set_extension(none,[identifier(none,french)]),identifier(none,'Language')),conjunct(none,subset(pos(0,0,4,17,0,0),set_extension(none,[identifier(none,german)]),identifier(none,'Language')),conjunct(none,subset(pos(0,0,4,25,0,0),set_extension(none,[identifier(none,spanish)]),identifier(none,'Language')),conjunct(none,member(pos(0,0,5,26,0,0),identifier(none,speaks),relations(none,identifier(none,'Personell'),identifier(pos(0,0,3,14,0,0),'Language'))),conjunct(none,subset(pos(0,0,6,9,0,0),set_extension(none,[identifier(none,tom)]),identifier(none,'Personell')),conjunct(none,subset(pos(0,0,6,14,0,0),set_extension(none,[identifier(none,david)]),identifier(none,'Personell')),conjunct(none,subset(pos(0,0,6,21,0,0),set_extension(none,[identifier(none,jeremy)]),identifier(none,'Personell')),conjunct(none,subset(pos(0,0,6,29,0,0),set_extension(none,[identifier(none,carol)]),identifier(none,'Personell')),conjunct(none,subset(pos(0,0,6,36,0,0),set_extension(none,[identifier(none,janet)]),identifier(none,'Personell')),conjunct(none,subset(pos(0,0,6,43,0,0),set_extension(none,[identifier(none,tracy)]),identifier(none,'Personell')),conjunct(none,subset(pos(0,0,7,5,0,0),identifier(none,male),identifier(none,'Personell')),conjunct(none,member(none,identifier(none,'Flight'),pow_subset(none,integer_set(none))),conjunct(none,member(pos(0,0,9,3,0,0),identifier(none,assign),relations(none,identifier(none,'Flight'),identifier(pos(0,0,5,14,0,0),'Personell'))),conjunct(none,equal(pos(0,0,13,8,0,0),identifier(pos(0,0,7,5,0,0),male),union(pos(0,0,13,19,0,0),union(pos(0,0,13,13,0,0),set_extension(pos(0,0,6,9,0,0),[identifier(none,tom)]),set_extension(pos(0,0,6,14,0,0),[identifier(none,david)])),set_extension(pos(0,0,6,21,0,0),[identifier(none,jeremy)]))),conjunct(none,equal(pos(0,0,16,10,0,0),identifier(pos(0,0,5,26,0,0),speaks),union(pos(0,0,16,89,0,0),union(pos(0,0,16,73,0,0),union(pos(0,0,16,56,0,0),union(pos(0,0,16,39,0,0),union(pos(0,0,16,23,0,0),cartesian_product(pos(0,0,16,14,0,0),set_extension(pos(0,0,6,9,0,0),[identifier(none,tom)]),set_extension(pos(0,0,4,17,0,0),[identifier(none,german)])),cartesian_product(pos(0,0,16,30,0,0),set_extension(pos(0,0,6,14,0,0),[identifier(none,david)]),set_extension(pos(0,0,4,9,0,0),[identifier(none,french)]))),cartesian_product(pos(0,0,16,47,0,0),set_extension(pos(0,0,6,21,0,0),[identifier(none,jeremy)]),set_extension(pos(0,0,4,17,0,0),[identifier(none,german)]))),cartesian_product(pos(0,0,16,63,0,0),set_extension(pos(0,0,6,29,0,0),[identifier(none,carol)]),set_extension(pos(0,0,4,25,0,0),[identifier(none,spanish)]))),cartesian_product(pos(0,0,16,80,0,0),set_extension(pos(0,0,6,36,0,0),[identifier(none,janet)]),set_extension(pos(0,0,4,9,0,0),[identifier(none,french)]))),cartesian_product(pos(0,0,16,96,0,0),set_extension(pos(0,0,6,43,0,0),[identifier(none,tracy)]),set_extension(pos(0,0,4,25,0,0),[identifier(none,spanish)])))),conjunct(none,equal(none,identifier(none,'Personell'),union(none,set_extension(none,[identifier(none,tom)]),union(none,set_extension(none,[identifier(none,david)]),union(none,set_extension(none,[identifier(none,jeremy)]),union(none,set_extension(none,[identifier(none,carol)]),union(none,set_extension(none,[identifier(none,janet)]),set_extension(none,[identifier(none,tracy)]))))))),conjunct(none,conjunct(none,not_equal(none,set_extension(none,[identifier(none,david)]),set_extension(none,[identifier(none,tom)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,jeremy)]),set_extension(none,[identifier(none,tom)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,jeremy)]),set_extension(none,[identifier(none,david)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,carol)]),set_extension(none,[identifier(none,tom)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,carol)]),set_extension(none,[identifier(none,david)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,carol)]),set_extension(none,[identifier(none,jeremy)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,janet)]),set_extension(none,[identifier(none,tom)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,janet)]),set_extension(none,[identifier(none,david)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,janet)]),set_extension(none,[identifier(none,jeremy)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,janet)]),set_extension(none,[identifier(none,carol)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,tracy)]),set_extension(none,[identifier(none,tom)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,tracy)]),set_extension(none,[identifier(none,david)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,tracy)]),set_extension(none,[identifier(none,jeremy)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,tracy)]),set_extension(none,[identifier(none,carol)])),not_equal(none,set_extension(none,[identifier(none,tracy)]),set_extension(none,[identifier(none,janet)])))))))))))))))),conjunct(none,equal(none,card(none,identifier(none,'Personell')),integer(none,6)),conjunct(none,equal(none,identifier(none,'Language'),union(none,set_extension(none,[identifier(none,french)]),union(none,set_extension(none,[identifier(none,german)]),set_extension(none,[identifier(none,spanish)])))),conjunct(none,conjunct(none,not_equal(none,set_extension(none,[identifier(none,german)]),set_extension(none,[identifier(none,french)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,spanish)]),set_extension(none,[identifier(none,french)])),not_equal(none,set_extension(none,[identifier(none,spanish)]),set_extension(none,[identifier(none,german)])))),equal(none,card(none,identifier(none,'Language')),integer(none,3))))))))))))))))))))))),definitions(none,[predicate_definition(pos(0,0,30,1,0,0),crewAlloc,[],conjunct(none,definition(pos(0,0,31,48,0,0),everybodyInSchedule,[]),conjunct(none,definition(pos(0,0,31,33,0,0),scheduleOk,[]),conjunct(none,definition(pos(0,0,31,20,0,0),allSexes,[]),definition(pos(0,0,31,3,0,0),allLanguages,[]))))),predicate_definition(pos(0,0,27,1,0,0),everybodyInSchedule,[],equal(pos(0,0,28,15,0,0),range(pos(0,0,28,7,0,0),identifier(pos(0,0,9,3,0,0),assign)),identifier(pos(0,0,5,14,0,0),'Personell'))),predicate_definition(pos(0,0,24,1,0,0),scheduleOk,[],forall(pos(0,0,25,3,0,0),[identifier(none,p),identifier(none,f)],implication(none,conjunct(none,subset(pos(0,0,25,20,0,0),set_extension(none,[identifier(none,f)]),identifier(pos(0,0,8,5,0,0),'Flight')),subset(pos(0,0,25,7,0,0),set_extension(none,[identifier(none,p)]),identifier(pos(0,0,5,14,0,0),'Personell'))),implication(pos(0,0,25,71,0,0),conjunct(none,subset(pos(0,0,25,53,0,0),set_extension(pos(0,0,25,7,0,0),[identifier(none,p)]),image(pos(0,0,25,63,0,0),identifier(pos(0,0,9,3,0,0),assign),definition(pos(0,0,25,56,0,0),next_Flight,[identifier(none,f)]))),subset(pos(0,0,25,35,0,0),set_extension(pos(0,0,25,7,0,0),[identifier(none,p)]),image(pos(0,0,25,39,0,0),identifier(pos(0,0,9,3,0,0),assign),set_extension(pos(0,0,25,20,0,0),[identifier(none,f)])))),negation(pos(0,0,25,74,0,0),subset(pos(0,0,25,81,0,0),set_extension(pos(0,0,25,7,0,0),[identifier(none,p)]),image(pos(0,0,25,97,0,0),identifier(pos(0,0,9,3,0,0),assign),definition(pos(0,0,25,84,0,0),next_Flight,[min(pos(0,0,25,84,0,0),definition(pos(0,0,25,89,0,0),next_Flight,[identifier(none,f)]))])))))))),predicate_definition(pos(0,0,21,1,0,0),allSexes,[],forall(pos(0,0,22,3,0,0),[identifier(none,f)],implication(none,subset(pos(0,0,22,7,0,0),set_extension(none,[identifier(none,f)]),identifier(pos(0,0,8,5,0,0),'Flight')),conjunct(none,greater(pos(0,0,22,43,0,0),card(none,intersection(pos(0,0,22,58,0,0),image(pos(0,0,22,50,0,0),identifier(pos(0,0,9,3,0,0),assign),set_extension(pos(0,0,22,7,0,0),[identifier(none,f)])),identifier(pos(0,0,7,5,0,0),male))),integer(none,0)),greater(pos(0,0,22,18,0,0),card(none,set_subtraction(pos(0,0,22,32,0,0),image(pos(0,0,22,25,0,0),identifier(pos(0,0,9,3,0,0),assign),set_extension(pos(0,0,22,7,0,0),[identifier(none,f)])),identifier(pos(0,0,7,5,0,0),male))),integer(none,0)))))),predicate_definition(pos(0,0,18,1,0,0),allLanguages,[],forall(pos(0,0,19,3,0,0),[identifier(none,f)],implication(none,subset(pos(0,0,19,7,0,0),set_extension(none,[identifier(none,f)]),identifier(pos(0,0,8,5,0,0),'Flight')),equal(pos(0,0,19,34,0,0),image(pos(0,0,19,26,0,0),identifier(pos(0,0,5,26,0,0),speaks),image(pos(0,0,19,19,0,0),identifier(pos(0,0,9,3,0,0),assign),set_extension(pos(0,0,19,7,0,0),[identifier(none,f)]))),identifier(pos(0,0,3,14,0,0),'Language'))))),expression_definition(pos(0,0,8,5,0,0),prevs_Flight,[identifier(pos(0,0,8,5,0,0),s)],comprehension_set(pos(0,0,8,5,0,0),[identifier(pos(0,0,8,5,0,0),x)],conjunct(pos(0,0,8,5,0,0),less(pos(0,0,8,5,0,0),identifier(pos(0,0,8,5,0,0),x),identifier(pos(0,0,8,5,0,0),s)),member(pos(0,0,8,5,0,0),identifier(pos(0,0,8,5,0,0),x),identifier(none,'Flight'))))),expression_definition(pos(0,0,8,5,0,0),prev_Flight,[identifier(pos(0,0,8,5,0,0),s)],comprehension_set(pos(0,0,8,5,0,0),[identifier(pos(0,0,8,5,0,0),x)],conjunct(pos(0,0,8,5,0,0),equal(pos(0,0,8,5,0,0),identifier(pos(0,0,8,5,0,0),x),minus(pos(0,0,8,5,0,0),identifier(pos(0,0,8,5,0,0),s),integer(pos(0,0,8,5,0,0),1))),member(pos(0,0,8,5,0,0),identifier(pos(0,0,8,5,0,0),x),identifier(none,'Flight'))))),expression_definition(pos(0,0,8,5,0,0),nexts_Flight,[identifier(pos(0,0,8,5,0,0),s)],comprehension_set(pos(0,0,8,5,0,0),[identifier(pos(0,0,8,5,0,0),x)],conjunct(pos(0,0,8,5,0,0),greater(pos(0,0,8,5,0,0),identifier(pos(0,0,8,5,0,0),x),identifier(pos(0,0,8,5,0,0),s)),member(pos(0,0,8,5,0,0),identifier(pos(0,0,8,5,0,0),x),identifier(none,'Flight'))))),expression_definition(pos(0,0,8,5,0,0),next_Flight,[identifier(pos(0,0,8,5,0,0),s)],comprehension_set(pos(0,0,8,5,0,0),[identifier(pos(0,0,8,5,0,0),x)],conjunct(pos(0,0,8,5,0,0),equal(pos(0,0,8,5,0,0),identifier(pos(0,0,8,5,0,0),x),add(pos(0,0,8,5,0,0),identifier(pos(0,0,8,5,0,0),s),integer(pos(0,0,8,5,0,0),1))),member(pos(0,0,8,5,0,0),identifier(pos(0,0,8,5,0,0),x),identifier(none,'Flight')))))]),operations(none,[operation(pos(0,0,34,1,0,0),identifier(pos(0,0,34,1,0,0),run0),[],[],precondition(pos(0,0,34,1,0,0),conjunct(pos(0,0,34,1,0,0),conjunct(none,truth(none),truth(none)),conjunct(none,definition(pos(0,0,31,48,0,0),everybodyInSchedule,[]),conjunct(none,definition(pos(0,0,31,33,0,0),scheduleOk,[]),conjunct(none,definition(pos(0,0,31,20,0,0),allSexes,[]),conjunct(none,definition(pos(0,0,31,3,0,0),allLanguages,[]),conjunct(none,equal(pos(0,0,16,10,0,0),identifier(pos(0,0,5,26,0,0),speaks),union(pos(0,0,16,89,0,0),union(pos(0,0,16,73,0,0),union(pos(0,0,16,56,0,0),union(pos(0,0,16,39,0,0),union(pos(0,0,16,23,0,0),cartesian_product(pos(0,0,16,14,0,0),set_extension(pos(0,0,6,9,0,0),[identifier(none,tom)]),set_extension(pos(0,0,4,17,0,0),[identifier(none,german)])),cartesian_product(pos(0,0,16,30,0,0),set_extension(pos(0,0,6,14,0,0),[identifier(none,david)]),set_extension(pos(0,0,4,9,0,0),[identifier(none,french)]))),cartesian_product(pos(0,0,16,47,0,0),set_extension(pos(0,0,6,21,0,0),[identifier(none,jeremy)]),set_extension(pos(0,0,4,17,0,0),[identifier(none,german)]))),cartesian_product(pos(0,0,16,63,0,0),set_extension(pos(0,0,6,29,0,0),[identifier(none,carol)]),set_extension(pos(0,0,4,25,0,0),[identifier(none,spanish)]))),cartesian_product(pos(0,0,16,80,0,0),set_extension(pos(0,0,6,36,0,0),[identifier(none,janet)]),set_extension(pos(0,0,4,9,0,0),[identifier(none,french)]))),cartesian_product(pos(0,0,16,96,0,0),set_extension(pos(0,0,6,43,0,0),[identifier(none,tracy)]),set_extension(pos(0,0,4,25,0,0),[identifier(none,spanish)])))),equal(pos(0,0,13,8,0,0),identifier(pos(0,0,7,5,0,0),male),union(pos(0,0,13,19,0,0),union(pos(0,0,13,13,0,0),set_extension(pos(0,0,6,9,0,0),[identifier(none,tom)]),set_extension(pos(0,0,6,14,0,0),[identifier(none,david)])),set_extension(pos(0,0,6,21,0,0),[identifier(none,jeremy)]))))))))),skip(none)))]),constants(none,[identifier(none,assign),identifier(pos(0,0,8,5,0,0),'Flight'),identifier(pos(0,0,7,5,0,0),male),identifier(pos(0,0,6,43,0,0),tracy),identifier(pos(0,0,6,36,0,0),janet),identifier(pos(0,0,6,29,0,0),carol),identifier(pos(0,0,6,21,0,0),jeremy),identifier(pos(0,0,6,14,0,0),david),identifier(pos(0,0,6,9,0,0),tom),identifier(none,speaks),identifier(pos(0,0,4,25,0,0),spanish),identifier(pos(0,0,4,17,0,0),german),identifier(pos(0,0,4,9,0,0),french)]),sets(none,[deferred_set(pos(0,0,5,14,0,0),'Personell'),deferred_set(pos(0,0,3,14,0,0),'Language')])]))).

test(enum_test,[]) :-
    AlloyTerm = alloy_model(facts([]),assertions([]),commands([run(and([],pos(14,3)),global_scope(-1),exact_scopes([]),bitwidth(-1),pos(1,5))]),functions([predicate('nothing',[],[],boolean(true,pos(14,3)),pos(1,3))]),signatures([signature('E',[],[],[ordered, abstract, enum],pos(6,1)),signature('E0',[],[],[one],pos(9,1)),signature('E1',[],[],[one],pos(12,1)),signature('E2',[],[],[one],pos(15,1))])) ,
    translate_alloy_model(AlloyTerm,Translated) , 
    Translated == machine(generated(none,abstract_machine(none,machine(none),machine_header(none,alloytranslation,[]),[properties(none,member(none,identifier(none,'E'),pow_subset(none,integer_set(none)))),definitions(none,[predicate_definition(pos(0,0,3,1,0,0),nothing,[],boolean_true(pos(0,0,3,14,0,0))),expression_definition(pos(0,0,1,6,0,0),prevs_E,[identifier(pos(0,0,1,6,0,0),s)],comprehension_set(pos(0,0,1,6,0,0),[identifier(pos(0,0,1,6,0,0),x)],conjunct(pos(0,0,1,6,0,0),less(pos(0,0,1,6,0,0),identifier(pos(0,0,1,6,0,0),x),identifier(pos(0,0,1,6,0,0),s)),member(pos(0,0,1,6,0,0),identifier(pos(0,0,1,6,0,0),x),identifier(none,'E'))))),expression_definition(pos(0,0,1,6,0,0),prev_E,[identifier(pos(0,0,1,6,0,0),s)],comprehension_set(pos(0,0,1,6,0,0),[identifier(pos(0,0,1,6,0,0),x)],conjunct(pos(0,0,1,6,0,0),equal(pos(0,0,1,6,0,0),identifier(pos(0,0,1,6,0,0),x),minus(pos(0,0,1,6,0,0),identifier(pos(0,0,1,6,0,0),s),integer(pos(0,0,1,6,0,0),1))),member(pos(0,0,1,6,0,0),identifier(pos(0,0,1,6,0,0),x),identifier(none,'E'))))),expression_definition(pos(0,0,1,6,0,0),nexts_E,[identifier(pos(0,0,1,6,0,0),s)],comprehension_set(pos(0,0,1,6,0,0),[identifier(pos(0,0,1,6,0,0),x)],conjunct(pos(0,0,1,6,0,0),greater(pos(0,0,1,6,0,0),identifier(pos(0,0,1,6,0,0),x),identifier(pos(0,0,1,6,0,0),s)),member(pos(0,0,1,6,0,0),identifier(pos(0,0,1,6,0,0),x),identifier(none,'E'))))),expression_definition(pos(0,0,1,6,0,0),next_E,[identifier(pos(0,0,1,6,0,0),s)],comprehension_set(pos(0,0,1,6,0,0),[identifier(pos(0,0,1,6,0,0),x)],conjunct(pos(0,0,1,6,0,0),equal(pos(0,0,1,6,0,0),identifier(pos(0,0,1,6,0,0),x),add(pos(0,0,1,6,0,0),identifier(pos(0,0,1,6,0,0),s),integer(pos(0,0,1,6,0,0),1))),member(pos(0,0,1,6,0,0),identifier(pos(0,0,1,6,0,0),x),identifier(none,'E')))))]),operations(none,[operation(pos(0,0,5,1,0,0),identifier(pos(0,0,5,1,0,0),run0),[],[],precondition(pos(0,0,5,1,0,0),conjunct(pos(0,0,5,1,0,0),conjunct(none,truth(none),truth(none)),truth(none)),skip(none)))]),sets(none,[deferred_set(pos(0,0,1,15,0,0),'E2'),deferred_set(pos(0,0,1,12,0,0),'E1'),deferred_set(pos(0,0,1,9,0,0),'E0')]),constants(none,[identifier(pos(0,0,1,6,0,0),'E')])]))).

test(graphiso,[]) :-
    AlloyTerm = alloy_model(facts([fact(and([equal(identifier('graph1',type([['Node', 'Node']],2),pos(3,2)),plus(plus(plus(plus(plus(plus(plus(plus(cartesian(identifier('a',type([['a']],1),pos(9,6)),identifier('c',type([['c']],1),pos(13,6)),type([['a', 'c']],2),pos(13,9)),cartesian(identifier('b',type([['b']],1),pos(11,6)),identifier('c',type([['c']],1),pos(13,6)),type([['b', 'c']],2),pos(20,9)),type([['a', 'c'], ['b', 'c']],2),pos(17,9)),cartesian(identifier('c',type([['c']],1),pos(13,6)),identifier('f',type([['f']],1),pos(19,6)),type([['c', 'f']],2),pos(27,9)),type([['a', 'c'], ['b', 'c'], ['c', 'f']],2),pos(24,9)),cartesian(identifier('d',type([['d']],1),pos(15,6)),identifier('f',type([['f']],1),pos(19,6)),type([['d', 'f']],2),pos(34,9)),type([['a', 'c'], ['b', 'c'], ['c', 'f'], ['d', 'f']],2),pos(31,9)),cartesian(identifier('e',type([['e']],1),pos(17,6)),identifier('f',type([['f']],1),pos(19,6)),type([['e', 'f']],2),pos(41,9)),type([['a', 'c'], ['b', 'c'], ['c', 'f'], ['d', 'f'], ['e', 'f']],2),pos(38,9)),cartesian(identifier('h',type([['h']],1),pos(23,6)),identifier('i',type([['i']],1),pos(25,6)),type([['h', 'i']],2),pos(48,9)),type([['a', 'c'], ['b', 'c'], ['c', 'f'], ['d', 'f'], ['e', 'f'], ['h', 'i']],2),pos(45,9)),cartesian(identifier('i',type([['i']],1),pos(25,6)),identifier('h',type([['h']],1),pos(23,6)),type([['i', 'h']],2),pos(55,9)),type([['a', 'c'], ['b', 'c'], ['c', 'f'], ['d', 'f'], ['e', 'f'], ['h', 'i'], ['i', 'h']],2),pos(52,9)),cartesian(identifier('f',type([['f']],1),pos(19,6)),identifier('f',type([['f']],1),pos(19,6)),type([['f', 'f']],2),pos(63,9)),type([['a', 'c'], ['b', 'c'], ['c', 'f'], ['d', 'f'], ['e', 'f'], ['h', 'i'], ['i', 'h'], ['f', 'f']],2),pos(59,9)),cartesian(identifier('g',type([['g']],1),pos(21,6)),identifier('g',type([['g']],1),pos(21,6)),type([['g', 'g']],2),pos(70,9)),type([['a', 'c'], ['b', 'c'], ['c', 'f'], ['d', 'f'], ['e', 'f'], ['h', 'i'], ['i', 'h'], ['f', 'f'], ['g', 'g']],2),pos(67,9)),type([untyped],0),pos(10,9)), equal(identifier('graph2',type([['Node', 'Node']],2),pos(3,3)),plus(plus(plus(plus(plus(plus(plus(plus(cartesian(identifier('b',type([['b']],1),pos(11,6)),identifier('e',type([['e']],1),pos(17,6)),type([['b', 'e']],2),pos(13,10)),cartesian(identifier('c',type([['c']],1),pos(13,6)),identifier('e',type([['e']],1),pos(17,6)),type([['c', 'e']],2),pos(20,10)),type([['b', 'e'], ['c', 'e']],2),pos(17,10)),cartesian(identifier('d',type([['d']],1),pos(15,6)),identifier('e',type([['e']],1),pos(17,6)),type([['d', 'e']],2),pos(27,10)),type([['b', 'e'], ['c', 'e'], ['d', 'e']],2),pos(24,10)),cartesian(identifier('f',type([['f']],1),pos(19,6)),identifier('d',type([['d']],1),pos(15,6)),type([['f', 'd']],2),pos(34,10)),type([['b', 'e'], ['c', 'e'], ['d', 'e'], ['f', 'd']],2),pos(31,10)),cartesian(identifier('g',type([['g']],1),pos(21,6)),identifier('d',type([['d']],1),pos(15,6)),type([['g', 'd']],2),pos(41,10)),type([['b', 'e'], ['c', 'e'], ['d', 'e'], ['f', 'd'], ['g', 'd']],2),pos(38,10)),cartesian(identifier('a',type([['a']],1),pos(9,6)),identifier('i',type([['i']],1),pos(25,6)),type([['a', 'i']],2),pos(48,10)),type([['b', 'e'], ['c', 'e'], ['d', 'e'], ['f', 'd'], ['g', 'd'], ['a', 'i']],2),pos(45,10)),cartesian(identifier('i',type([['i']],1),pos(25,6)),identifier('a',type([['a']],1),pos(9,6)),type([['i', 'a']],2),pos(55,10)),type([['b', 'e'], ['c', 'e'], ['d', 'e'], ['f', 'd'], ['g', 'd'], ['a', 'i'], ['i', 'a']],2),pos(52,10)),cartesian(identifier('e',type([['e']],1),pos(17,6)),identifier('e',type([['e']],1),pos(17,6)),type([['e', 'e']],2),pos(63,10)),type([['b', 'e'], ['c', 'e'], ['d', 'e'], ['f', 'd'], ['g', 'd'], ['a', 'i'], ['i', 'a'], ['e', 'e']],2),pos(59,10)),cartesian(identifier('h',type([['h']],1),pos(23,6)),identifier('h',type([['h']],1),pos(23,6)),type([['h', 'h']],2),pos(70,10)),type([['b', 'e'], ['c', 'e'], ['d', 'e'], ['f', 'd'], ['g', 'd'], ['a', 'i'], ['i', 'a'], ['e', 'e'], ['h', 'h']],2),pos(67,10)),type([untyped],0),pos(10,10))],pos(1,1)),(1,8))]),assertions([]),commands([run(and([equal(identifier('graph1',type([['Node', 'Node']],2),pos(3,2)),plus(plus(plus(plus(plus(plus(plus(plus(cartesian(identifier('a',type([['a']],1),pos(9,6)),identifier('c',type([['c']],1),pos(13,6)),type([['a', 'c']],2),pos(13,9)),cartesian(identifier('b',type([['b']],1),pos(11,6)),identifier('c',type([['c']],1),pos(13,6)),type([['b', 'c']],2),pos(20,9)),type([['a', 'c'], ['b', 'c']],2),pos(17,9)),cartesian(identifier('c',type([['c']],1),pos(13,6)),identifier('f',type([['f']],1),pos(19,6)),type([['c', 'f']],2),pos(27,9)),type([['a', 'c'], ['b', 'c'], ['c', 'f']],2),pos(24,9)),cartesian(identifier('d',type([['d']],1),pos(15,6)),identifier('f',type([['f']],1),pos(19,6)),type([['d', 'f']],2),pos(34,9)),type([['a', 'c'], ['b', 'c'], ['c', 'f'], ['d', 'f']],2),pos(31,9)),cartesian(identifier('e',type([['e']],1),pos(17,6)),identifier('f',type([['f']],1),pos(19,6)),type([['e', 'f']],2),pos(41,9)),type([['a', 'c'], ['b', 'c'], ['c', 'f'], ['d', 'f'], ['e', 'f']],2),pos(38,9)),cartesian(identifier('h',type([['h']],1),pos(23,6)),identifier('i',type([['i']],1),pos(25,6)),type([['h', 'i']],2),pos(48,9)),type([['a', 'c'], ['b', 'c'], ['c', 'f'], ['d', 'f'], ['e', 'f'], ['h', 'i']],2),pos(45,9)),cartesian(identifier('i',type([['i']],1),pos(25,6)),identifier('h',type([['h']],1),pos(23,6)),type([['i', 'h']],2),pos(55,9)),type([['a', 'c'], ['b', 'c'], ['c', 'f'], ['d', 'f'], ['e', 'f'], ['h', 'i'], ['i', 'h']],2),pos(52,9)),cartesian(identifier('f',type([['f']],1),pos(19,6)),identifier('f',type([['f']],1),pos(19,6)),type([['f', 'f']],2),pos(63,9)),type([['a', 'c'], ['b', 'c'], ['c', 'f'], ['d', 'f'], ['e', 'f'], ['h', 'i'], ['i', 'h'], ['f', 'f']],2),pos(59,9)),cartesian(identifier('g',type([['g']],1),pos(21,6)),identifier('g',type([['g']],1),pos(21,6)),type([['g', 'g']],2),pos(70,9)),type([['a', 'c'], ['b', 'c'], ['c', 'f'], ['d', 'f'], ['e', 'f'], ['h', 'i'], ['i', 'h'], ['f', 'f'], ['g', 'g']],2),pos(67,9)),type([untyped],0),pos(10,9)), equal(identifier('graph2',type([['Node', 'Node']],2),pos(3,3)),plus(plus(plus(plus(plus(plus(plus(plus(cartesian(identifier('b',type([['b']],1),pos(11,6)),identifier('e',type([['e']],1),pos(17,6)),type([['b', 'e']],2),pos(13,10)),cartesian(identifier('c',type([['c']],1),pos(13,6)),identifier('e',type([['e']],1),pos(17,6)),type([['c', 'e']],2),pos(20,10)),type([['b', 'e'], ['c', 'e']],2),pos(17,10)),cartesian(identifier('d',type([['d']],1),pos(15,6)),identifier('e',type([['e']],1),pos(17,6)),type([['d', 'e']],2),pos(27,10)),type([['b', 'e'], ['c', 'e'], ['d', 'e']],2),pos(24,10)),cartesian(identifier('f',type([['f']],1),pos(19,6)),identifier('d',type([['d']],1),pos(15,6)),type([['f', 'd']],2),pos(34,10)),type([['b', 'e'], ['c', 'e'], ['d', 'e'], ['f', 'd']],2),pos(31,10)),cartesian(identifier('g',type([['g']],1),pos(21,6)),identifier('d',type([['d']],1),pos(15,6)),type([['g', 'd']],2),pos(41,10)),type([['b', 'e'], ['c', 'e'], ['d', 'e'], ['f', 'd'], ['g', 'd']],2),pos(38,10)),cartesian(identifier('a',type([['a']],1),pos(9,6)),identifier('i',type([['i']],1),pos(25,6)),type([['a', 'i']],2),pos(48,10)),type([['b', 'e'], ['c', 'e'], ['d', 'e'], ['f', 'd'], ['g', 'd'], ['a', 'i']],2),pos(45,10)),cartesian(identifier('i',type([['i']],1),pos(25,6)),identifier('a',type([['a']],1),pos(9,6)),type([['i', 'a']],2),pos(55,10)),type([['b', 'e'], ['c', 'e'], ['d', 'e'], ['f', 'd'], ['g', 'd'], ['a', 'i'], ['i', 'a']],2),pos(52,10)),cartesian(identifier('e',type([['e']],1),pos(17,6)),identifier('e',type([['e']],1),pos(17,6)),type([['e', 'e']],2),pos(63,10)),type([['b', 'e'], ['c', 'e'], ['d', 'e'], ['f', 'd'], ['g', 'd'], ['a', 'i'], ['i', 'a'], ['e', 'e']],2),pos(59,10)),cartesian(identifier('h',type([['h']],1),pos(23,6)),identifier('h',type([['h']],1),pos(23,6)),type([['h', 'h']],2),pos(70,10)),type([['b', 'e'], ['c', 'e'], ['d', 'e'], ['f', 'd'], ['g', 'd'], ['a', 'i'], ['i', 'a'], ['e', 'e'], ['h', 'h']],2),pos(67,10)),type([untyped],0),pos(10,10)), pred_call('permutation',[],type([untyped],0),pos(3,22)), all(['n'],[field('n',oneof(identifier('Node',type([['Node']],1),pos(14,1)),type([['Node']],1),pos(9,23)),type([['Node']],1),[],pos(7,23))],equal(join(join(identifier('n',type([['Node']],1),pos(7,23)),identifier('graph1',type([['Node', 'Node']],2),pos(3,2)),type([['Node']],1),pos(17,23)),identifier('p',type([['Node', 'Node']],2),pos(3,4)),type([['Node']],1),pos(24,23)),join(join(identifier('n',type([['Node']],1),pos(7,23)),identifier('p',type([['Node', 'Node']],2),pos(3,4)),type([['Node']],1),pos(30,23)),identifier('graph2',type([['Node', 'Node']],2),pos(3,3)),type([['Node']],1),pos(32,23)),type([untyped],0),pos(27,23)),type([untyped],0),pos(3,23))],pos(3,9)),global_scope(-1),exact_scopes([]),bitwidth(-1),pos(1,26))]),functions([predicate('permutation',[],[],and([in(join(identifier('p',type([['Node', 'Node']],2),pos(3,4)),inverse(identifier('p',type([['Node', 'Node']],2),pos(3,4)),type([['Node', 'Node']],2),pos(5,16)),type([['Node', 'Node']],2),pos(4,16)),iden(pos(11,16)),type([untyped],0),pos(8,16)), equal(join(identifier('univ',type([['univ']],1),pos(1,1)),identifier('p',type([['Node', 'Node']],2),pos(3,4)),type([['Node']],1),pos(7,18)),identifier('Node',type([['Node']],1),pos(14,1)),type([untyped],0),pos(10,18))],pos(1,1)),pos(1,13)),predicate('isomorph',[],[],and([pred_call('permutation',[],type([untyped],0),pos(3,22)), all(['n'],[field('n',oneof(identifier('Node',type([['Node']],1),pos(14,1)),type([['Node']],1),pos(9,23)),type([['Node']],1),[],pos(7,23))],equal(join(join(identifier('n',type([['Node']],1),pos(7,23)),identifier('graph1',type([['Node', 'Node']],2),pos(3,2)),type([['Node']],1),pos(17,23)),identifier('p',type([['Node', 'Node']],2),pos(3,4)),type([['Node']],1),pos(24,23)),join(join(identifier('n',type([['Node']],1),pos(7,23)),identifier('p',type([['Node', 'Node']],2),pos(3,4)),type([['Node']],1),pos(30,23)),identifier('graph2',type([['Node', 'Node']],2),pos(3,3)),type([['Node']],1),pos(32,23)),type([untyped],0),pos(27,23)),type([untyped],0),pos(3,23))],pos(1,1)),pos(1,21))]),signatures([signature('Node',[field('graph1',setof(identifier('Node',type([['Node']],1),pos(14,1)),type([['Node']],1),pos(12,2)),type([['Node']],1),[],pos(3,2)),field('graph2',setof(identifier('Node',type([['Node']],1),pos(14,1)),type([['Node']],1),pos(12,3)),type([['Node']],1),[],pos(3,3)),field('p',oneof(identifier('Node',type([['Node']],1),pos(14,1)),type([['Node']],1),pos(7,4)),type([['Node']],1),[],pos(3,4))],[],[abstract],pos(14,1)),signature('a',[],[],[one, subsig('Node')],pos(9,6)),signature('b',[],[],[one, subsig('Node')],pos(11,6)),signature('c',[],[],[one, subsig('Node')],pos(13,6)),signature('d',[],[],[one, subsig('Node')],pos(15,6)),signature('e',[],[],[one, subsig('Node')],pos(17,6)),signature('f',[],[],[one, subsig('Node')],pos(19,6)),signature('g',[],[],[one, subsig('Node')],pos(21,6)),signature('h',[],[],[one, subsig('Node')],pos(23,6)),signature('i',[],[],[one, subsig('Node')],pos(25,6))])) ,
    translate_alloy_model(AlloyTerm,Translated) , 
    Translated == machine(generated(none,abstract_machine(none,machine(none),machine_header(none,alloytranslation,[]),[properties(none,conjunct(none,member(pos(0,0,2,3,0,0),identifier(none,graph1),relations(none,identifier(none,'Node'),identifier(pos(0,0,1,14,0,0),'Node'))),conjunct(none,member(pos(0,0,3,3,0,0),identifier(none,graph2),relations(none,identifier(none,'Node'),identifier(pos(0,0,1,14,0,0),'Node'))),conjunct(none,member(pos(0,0,4,3,0,0),identifier(none,p),total_function(none,identifier(none,'Node'),identifier(pos(0,0,1,14,0,0),'Node'))),conjunct(none,subset(pos(0,0,6,9,0,0),set_extension(none,[identifier(none,a)]),identifier(none,'Node')),conjunct(none,subset(pos(0,0,6,11,0,0),set_extension(none,[identifier(none,b)]),identifier(none,'Node')),conjunct(none,subset(pos(0,0,6,13,0,0),set_extension(none,[identifier(none,c)]),identifier(none,'Node')),conjunct(none,subset(pos(0,0,6,15,0,0),set_extension(none,[identifier(none,d)]),identifier(none,'Node')),conjunct(none,subset(pos(0,0,6,17,0,0),set_extension(none,[identifier(none,e)]),identifier(none,'Node')),conjunct(none,subset(pos(0,0,6,19,0,0),set_extension(none,[identifier(none,f)]),identifier(none,'Node')),conjunct(none,subset(pos(0,0,6,21,0,0),set_extension(none,[identifier(none,g)]),identifier(none,'Node')),conjunct(none,subset(pos(0,0,6,23,0,0),set_extension(none,[identifier(none,h)]),identifier(none,'Node')),conjunct(none,subset(pos(0,0,6,25,0,0),set_extension(none,[identifier(none,i)]),identifier(none,'Node')),conjunct(none,conjunct(none,equal(pos(0,0,10,10,0,0),identifier(pos(0,0,3,3,0,0),graph2),union(pos(0,0,10,67,0,0),union(pos(0,0,10,59,0,0),union(pos(0,0,10,52,0,0),union(pos(0,0,10,45,0,0),union(pos(0,0,10,38,0,0),union(pos(0,0,10,31,0,0),union(pos(0,0,10,24,0,0),union(pos(0,0,10,17,0,0),cartesian_product(pos(0,0,10,13,0,0),set_extension(pos(0,0,6,11,0,0),[identifier(none,b)]),set_extension(pos(0,0,6,17,0,0),[identifier(none,e)])),cartesian_product(pos(0,0,10,20,0,0),set_extension(pos(0,0,6,13,0,0),[identifier(none,c)]),set_extension(pos(0,0,6,17,0,0),[identifier(none,e)]))),cartesian_product(pos(0,0,10,27,0,0),set_extension(pos(0,0,6,15,0,0),[identifier(none,d)]),set_extension(pos(0,0,6,17,0,0),[identifier(none,e)]))),cartesian_product(pos(0,0,10,34,0,0),set_extension(pos(0,0,6,19,0,0),[identifier(none,f)]),set_extension(pos(0,0,6,15,0,0),[identifier(none,d)]))),cartesian_product(pos(0,0,10,41,0,0),set_extension(pos(0,0,6,21,0,0),[identifier(none,g)]),set_extension(pos(0,0,6,15,0,0),[identifier(none,d)]))),cartesian_product(pos(0,0,10,48,0,0),set_extension(pos(0,0,6,9,0,0),[identifier(none,a)]),set_extension(pos(0,0,6,25,0,0),[identifier(none,i)]))),cartesian_product(pos(0,0,10,55,0,0),set_extension(pos(0,0,6,25,0,0),[identifier(none,i)]),set_extension(pos(0,0,6,9,0,0),[identifier(none,a)]))),cartesian_product(pos(0,0,10,63,0,0),set_extension(pos(0,0,6,17,0,0),[identifier(none,e)]),set_extension(pos(0,0,6,17,0,0),[identifier(none,e)]))),cartesian_product(pos(0,0,10,70,0,0),set_extension(pos(0,0,6,23,0,0),[identifier(none,h)]),set_extension(pos(0,0,6,23,0,0),[identifier(none,h)])))),equal(pos(0,0,9,10,0,0),identifier(pos(0,0,2,3,0,0),graph1),union(pos(0,0,9,67,0,0),union(pos(0,0,9,59,0,0),union(pos(0,0,9,52,0,0),union(pos(0,0,9,45,0,0),union(pos(0,0,9,38,0,0),union(pos(0,0,9,31,0,0),union(pos(0,0,9,24,0,0),union(pos(0,0,9,17,0,0),cartesian_product(pos(0,0,9,13,0,0),set_extension(pos(0,0,6,9,0,0),[identifier(none,a)]),set_extension(pos(0,0,6,13,0,0),[identifier(none,c)])),cartesian_product(pos(0,0,9,20,0,0),set_extension(pos(0,0,6,11,0,0),[identifier(none,b)]),set_extension(pos(0,0,6,13,0,0),[identifier(none,c)]))),cartesian_product(pos(0,0,9,27,0,0),set_extension(pos(0,0,6,13,0,0),[identifier(none,c)]),set_extension(pos(0,0,6,19,0,0),[identifier(none,f)]))),cartesian_product(pos(0,0,9,34,0,0),set_extension(pos(0,0,6,15,0,0),[identifier(none,d)]),set_extension(pos(0,0,6,19,0,0),[identifier(none,f)]))),cartesian_product(pos(0,0,9,41,0,0),set_extension(pos(0,0,6,17,0,0),[identifier(none,e)]),set_extension(pos(0,0,6,19,0,0),[identifier(none,f)]))),cartesian_product(pos(0,0,9,48,0,0),set_extension(pos(0,0,6,23,0,0),[identifier(none,h)]),set_extension(pos(0,0,6,25,0,0),[identifier(none,i)]))),cartesian_product(pos(0,0,9,55,0,0),set_extension(pos(0,0,6,25,0,0),[identifier(none,i)]),set_extension(pos(0,0,6,23,0,0),[identifier(none,h)]))),cartesian_product(pos(0,0,9,63,0,0),set_extension(pos(0,0,6,19,0,0),[identifier(none,f)]),set_extension(pos(0,0,6,19,0,0),[identifier(none,f)]))),cartesian_product(pos(0,0,9,70,0,0),set_extension(pos(0,0,6,21,0,0),[identifier(none,g)]),set_extension(pos(0,0,6,21,0,0),[identifier(none,g)]))))),conjunct(none,equal(none,identifier(none,'Node'),union(none,set_extension(none,[identifier(none,a)]),union(none,set_extension(none,[identifier(none,b)]),union(none,set_extension(none,[identifier(none,c)]),union(none,set_extension(none,[identifier(none,d)]),union(none,set_extension(none,[identifier(none,e)]),union(none,set_extension(none,[identifier(none,f)]),union(none,set_extension(none,[identifier(none,g)]),union(none,set_extension(none,[identifier(none,h)]),set_extension(none,[identifier(none,i)])))))))))),conjunct(none,conjunct(none,not_equal(none,set_extension(none,[identifier(none,b)]),set_extension(none,[identifier(none,a)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,c)]),set_extension(none,[identifier(none,a)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,c)]),set_extension(none,[identifier(none,b)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,d)]),set_extension(none,[identifier(none,a)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,d)]),set_extension(none,[identifier(none,b)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,d)]),set_extension(none,[identifier(none,c)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,e)]),set_extension(none,[identifier(none,a)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,e)]),set_extension(none,[identifier(none,b)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,e)]),set_extension(none,[identifier(none,c)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,e)]),set_extension(none,[identifier(none,d)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,f)]),set_extension(none,[identifier(none,a)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,f)]),set_extension(none,[identifier(none,b)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,f)]),set_extension(none,[identifier(none,c)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,f)]),set_extension(none,[identifier(none,d)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,f)]),set_extension(none,[identifier(none,e)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,g)]),set_extension(none,[identifier(none,a)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,g)]),set_extension(none,[identifier(none,b)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,g)]),set_extension(none,[identifier(none,c)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,g)]),set_extension(none,[identifier(none,d)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,g)]),set_extension(none,[identifier(none,e)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,g)]),set_extension(none,[identifier(none,f)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,h)]),set_extension(none,[identifier(none,a)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,h)]),set_extension(none,[identifier(none,b)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,h)]),set_extension(none,[identifier(none,c)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,h)]),set_extension(none,[identifier(none,d)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,h)]),set_extension(none,[identifier(none,e)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,h)]),set_extension(none,[identifier(none,f)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,h)]),set_extension(none,[identifier(none,g)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,i)]),set_extension(none,[identifier(none,a)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,i)]),set_extension(none,[identifier(none,b)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,i)]),set_extension(none,[identifier(none,c)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,i)]),set_extension(none,[identifier(none,d)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,i)]),set_extension(none,[identifier(none,e)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,i)]),set_extension(none,[identifier(none,f)])),conjunct(none,not_equal(none,set_extension(none,[identifier(none,i)]),set_extension(none,[identifier(none,g)])),not_equal(none,set_extension(none,[identifier(none,i)]),set_extension(none,[identifier(none,h)]))))))))))))))))))))))))))))))))))))),equal(none,card(none,identifier(none,'Node')),integer(none,9)))))))))))))))))),definitions(none,[predicate_definition(pos(0,0,21,1,0,0),isomorph,[],conjunct(none,forall(pos(0,0,23,3,0,0),[identifier(none,n)],implication(none,subset(pos(0,0,23,7,0,0),set_extension(none,[identifier(none,n)]),identifier(pos(0,0,1,14,0,0),'Node')),equal(pos(0,0,23,27,0,0),image(pos(0,0,23,24,0,0),identifier(pos(0,0,4,3,0,0),p),image(pos(0,0,23,17,0,0),identifier(pos(0,0,2,3,0,0),graph1),set_extension(pos(0,0,23,7,0,0),[identifier(none,n)]))),image(pos(0,0,23,32,0,0),identifier(pos(0,0,3,3,0,0),graph2),image(pos(0,0,23,30,0,0),identifier(pos(0,0,4,3,0,0),p),set_extension(pos(0,0,23,7,0,0),[identifier(none,n)])))))),definition(pos(0,0,22,3,0,0),permutation,[]))),predicate_definition(pos(0,0,13,1,0,0),permutation,[],conjunct(none,equal(pos(0,0,18,10,0,0),range(pos(0,0,18,7,0,0),identifier(pos(0,0,4,3,0,0),p)),identifier(pos(0,0,1,14,0,0),'Node')),subset(pos(0,0,16,8,0,0),composition(pos(0,0,16,4,0,0),identifier(pos(0,0,4,3,0,0),p),reverse(pos(0,0,16,5,0,0),identifier(pos(0,0,4,3,0,0),p))),event_b_identity(pos(0,0,16,11,0,0)))))]),operations(none,[operation(pos(0,0,26,1,0,0),identifier(pos(0,0,26,1,0,0),run0),[],[],precondition(pos(0,0,26,1,0,0),conjunct(pos(0,0,26,1,0,0),conjunct(none,truth(none),truth(none)),conjunct(none,forall(pos(0,0,23,3,0,0),[identifier(none,n)],implication(none,subset(pos(0,0,23,7,0,0),set_extension(none,[identifier(none,n)]),identifier(pos(0,0,1,14,0,0),'Node')),equal(pos(0,0,23,27,0,0),image(pos(0,0,23,24,0,0),identifier(pos(0,0,4,3,0,0),p),image(pos(0,0,23,17,0,0),identifier(pos(0,0,2,3,0,0),graph1),set_extension(pos(0,0,23,7,0,0),[identifier(none,n)]))),image(pos(0,0,23,32,0,0),identifier(pos(0,0,3,3,0,0),graph2),image(pos(0,0,23,30,0,0),identifier(pos(0,0,4,3,0,0),p),set_extension(pos(0,0,23,7,0,0),[identifier(none,n)])))))),conjunct(none,definition(pos(0,0,22,3,0,0),permutation,[]),conjunct(none,equal(pos(0,0,10,10,0,0),identifier(pos(0,0,3,3,0,0),graph2),union(pos(0,0,10,67,0,0),union(pos(0,0,10,59,0,0),union(pos(0,0,10,52,0,0),union(pos(0,0,10,45,0,0),union(pos(0,0,10,38,0,0),union(pos(0,0,10,31,0,0),union(pos(0,0,10,24,0,0),union(pos(0,0,10,17,0,0),cartesian_product(pos(0,0,10,13,0,0),set_extension(pos(0,0,6,11,0,0),[identifier(none,b)]),set_extension(pos(0,0,6,17,0,0),[identifier(none,e)])),cartesian_product(pos(0,0,10,20,0,0),set_extension(pos(0,0,6,13,0,0),[identifier(none,c)]),set_extension(pos(0,0,6,17,0,0),[identifier(none,e)]))),cartesian_product(pos(0,0,10,27,0,0),set_extension(pos(0,0,6,15,0,0),[identifier(none,d)]),set_extension(pos(0,0,6,17,0,0),[identifier(none,e)]))),cartesian_product(pos(0,0,10,34,0,0),set_extension(pos(0,0,6,19,0,0),[identifier(none,f)]),set_extension(pos(0,0,6,15,0,0),[identifier(none,d)]))),cartesian_product(pos(0,0,10,41,0,0),set_extension(pos(0,0,6,21,0,0),[identifier(none,g)]),set_extension(pos(0,0,6,15,0,0),[identifier(none,d)]))),cartesian_product(pos(0,0,10,48,0,0),set_extension(pos(0,0,6,9,0,0),[identifier(none,a)]),set_extension(pos(0,0,6,25,0,0),[identifier(none,i)]))),cartesian_product(pos(0,0,10,55,0,0),set_extension(pos(0,0,6,25,0,0),[identifier(none,i)]),set_extension(pos(0,0,6,9,0,0),[identifier(none,a)]))),cartesian_product(pos(0,0,10,63,0,0),set_extension(pos(0,0,6,17,0,0),[identifier(none,e)]),set_extension(pos(0,0,6,17,0,0),[identifier(none,e)]))),cartesian_product(pos(0,0,10,70,0,0),set_extension(pos(0,0,6,23,0,0),[identifier(none,h)]),set_extension(pos(0,0,6,23,0,0),[identifier(none,h)])))),equal(pos(0,0,9,10,0,0),identifier(pos(0,0,2,3,0,0),graph1),union(pos(0,0,9,67,0,0),union(pos(0,0,9,59,0,0),union(pos(0,0,9,52,0,0),union(pos(0,0,9,45,0,0),union(pos(0,0,9,38,0,0),union(pos(0,0,9,31,0,0),union(pos(0,0,9,24,0,0),union(pos(0,0,9,17,0,0),cartesian_product(pos(0,0,9,13,0,0),set_extension(pos(0,0,6,9,0,0),[identifier(none,a)]),set_extension(pos(0,0,6,13,0,0),[identifier(none,c)])),cartesian_product(pos(0,0,9,20,0,0),set_extension(pos(0,0,6,11,0,0),[identifier(none,b)]),set_extension(pos(0,0,6,13,0,0),[identifier(none,c)]))),cartesian_product(pos(0,0,9,27,0,0),set_extension(pos(0,0,6,13,0,0),[identifier(none,c)]),set_extension(pos(0,0,6,19,0,0),[identifier(none,f)]))),cartesian_product(pos(0,0,9,34,0,0),set_extension(pos(0,0,6,15,0,0),[identifier(none,d)]),set_extension(pos(0,0,6,19,0,0),[identifier(none,f)]))),cartesian_product(pos(0,0,9,41,0,0),set_extension(pos(0,0,6,17,0,0),[identifier(none,e)]),set_extension(pos(0,0,6,19,0,0),[identifier(none,f)]))),cartesian_product(pos(0,0,9,48,0,0),set_extension(pos(0,0,6,23,0,0),[identifier(none,h)]),set_extension(pos(0,0,6,25,0,0),[identifier(none,i)]))),cartesian_product(pos(0,0,9,55,0,0),set_extension(pos(0,0,6,25,0,0),[identifier(none,i)]),set_extension(pos(0,0,6,23,0,0),[identifier(none,h)]))),cartesian_product(pos(0,0,9,63,0,0),set_extension(pos(0,0,6,19,0,0),[identifier(none,f)]),set_extension(pos(0,0,6,19,0,0),[identifier(none,f)]))),cartesian_product(pos(0,0,9,70,0,0),set_extension(pos(0,0,6,21,0,0),[identifier(none,g)]),set_extension(pos(0,0,6,21,0,0),[identifier(none,g)])))))))),skip(none)))]),constants(none,[identifier(pos(0,0,6,25,0,0),i),identifier(pos(0,0,6,23,0,0),h),identifier(pos(0,0,6,21,0,0),g),identifier(pos(0,0,6,19,0,0),f),identifier(pos(0,0,6,17,0,0),e),identifier(pos(0,0,6,15,0,0),d),identifier(pos(0,0,6,13,0,0),c),identifier(pos(0,0,6,11,0,0),b),identifier(pos(0,0,6,9,0,0),a),identifier(none,p),identifier(none,graph2),identifier(none,graph1)]),sets(none,[deferred_set(pos(0,0,1,14,0,0),'Node')])]))).

test(disj_field_test,[]) :-
    AlloyTerm = alloy_model(facts([]),assertions([]),commands([run(and([],pos(14,5)),global_scope(-1),exact_scopes([]),bitwidth(-1),pos(1,7))]),functions([predicate('nothing',[],[],boolean(true,pos(14,5)),pos(1,5))]),signatures([signature('jupp',[],[],[],pos(5,1)),signature('siggi',[field('f',oneof(identifier('jupp',type([['jupp']],1),pos(5,1)),type([['jupp']],1),pos(21,3)),type([['jupp']],1),[disj],pos(13,3)),field('g',oneof(identifier('jupp',type([['jupp']],1),pos(5,1)),type([['jupp']],1),pos(35,3)),type([['jupp']],1),[disj],pos(27,3))],[],[],pos(5,3))])) ,
    translate_alloy_model(AlloyTerm,Translated) , 
    Translated == machine(generated(none,abstract_machine(none,machine(none),machine_header(none,alloytranslation,[]),[properties(none,conjunct(none,forall(pos(0,0,3,13,0,0),[identifier(pos(0,0,3,13,0,0),a),identifier(pos(0,0,3,13,0,0),b)],implication(pos(0,0,3,13,0,0),conjunct(pos(0,0,3,13,0,0),conjunct(pos(0,0,3,13,0,0),member(pos(0,0,3,13,0,0),identifier(pos(0,0,3,13,0,0),a),identifier(none,siggi)),member(pos(0,0,3,13,0,0),identifier(pos(0,0,3,13,0,0),b),identifier(none,siggi))),not_equal(pos(0,0,3,13,0,0),identifier(pos(0,0,3,13,0,0),a),identifier(pos(0,0,3,13,0,0),b))),equal(pos(0,0,3,13,0,0),intersection(pos(0,0,3,13,0,0),image(pos(0,0,3,13,0,0),identifier(none,f),set_extension(none,[identifier(pos(0,0,3,13,0,0),a)])),image(pos(0,0,3,13,0,0),identifier(none,f),set_extension(none,[identifier(pos(0,0,3,13,0,0),b)]))),empty_set(pos(0,0,3,13,0,0))))),conjunct(none,member(pos(0,0,3,13,0,0),identifier(none,f),total_function(none,identifier(none,siggi),identifier(pos(0,0,1,5,0,0),jupp))),conjunct(none,forall(pos(0,0,3,27,0,0),[identifier(pos(0,0,3,27,0,0),a),identifier(pos(0,0,3,27,0,0),b)],implication(pos(0,0,3,27,0,0),conjunct(pos(0,0,3,27,0,0),conjunct(pos(0,0,3,27,0,0),member(pos(0,0,3,27,0,0),identifier(pos(0,0,3,27,0,0),a),identifier(none,siggi)),member(pos(0,0,3,27,0,0),identifier(pos(0,0,3,27,0,0),b),identifier(none,siggi))),not_equal(pos(0,0,3,27,0,0),identifier(pos(0,0,3,27,0,0),a),identifier(pos(0,0,3,27,0,0),b))),equal(pos(0,0,3,27,0,0),intersection(pos(0,0,3,27,0,0),image(pos(0,0,3,27,0,0),identifier(none,g),set_extension(none,[identifier(pos(0,0,3,27,0,0),a)])),image(pos(0,0,3,27,0,0),identifier(none,g),set_extension(none,[identifier(pos(0,0,3,27,0,0),b)]))),empty_set(pos(0,0,3,27,0,0))))),member(pos(0,0,3,27,0,0),identifier(none,g),total_function(none,identifier(none,siggi),identifier(pos(0,0,1,5,0,0),jupp))))))),definitions(none,[predicate_definition(pos(0,0,5,1,0,0),nothing,[],boolean_true(pos(0,0,5,14,0,0)))]),operations(none,[operation(pos(0,0,7,1,0,0),identifier(pos(0,0,7,1,0,0),run0),[],[],precondition(pos(0,0,7,1,0,0),conjunct(pos(0,0,7,1,0,0),conjunct(none,truth(none),truth(none)),truth(none)),skip(none)))]),constants(none,[identifier(none,g),identifier(none,f)]),sets(none,[deferred_set(pos(0,0,3,5,0,0),siggi),deferred_set(pos(0,0,1,5,0,0),jupp)])]))).

test(family_v1,[]) :-
    AlloyTerm = alloy_model(facts([fact(and([equal(join(identifier('Humans',type([['Humans']],1),pos(9,3)),identifier('women',type([['Humans', 'Person']],2),pos(1,6)),type([['Person']],1),pos(7,15)),minus(identifier('Person',type([['Person']],1),pos(5,1)),join(identifier('Humans',type([['Humans']],1),pos(9,3)),identifier('men',type([['Humans', 'Person']],2),pos(1,5)),type([['Person']],1),pos(31,15)),type([['Person']],1),pos(23,15)),type([untyped],0),pos(14,15)), greater(card(join(identifier('Humans',type([['Humans']],1),pos(9,3)),identifier('husband',type([['Humans', 'Person', 'Person']],3),pos(1,9)),type([['Person', 'Person']],2),pos(9,20)),type([['Int']],1),pos(1,20)),integer(1,pos(20,20)),type([untyped],0),pos(18,20)), greater(card(join(identifier('Humans',type([['Humans']],1),pos(9,3)),identifier('wife',type([['Humans', 'Person', 'Person']],3),pos(1,10)),type([['Person', 'Person']],2),pos(9,21)),type([['Int']],1),pos(1,21)),integer(1,pos(16,21)),type([untyped],0),pos(14,21))],pos(1,1)),(1,13))]),assertions([]),commands([run(and([equal(join(identifier('Humans',type([['Humans']],1),pos(9,3)),identifier('women',type([['Humans', 'Person']],2),pos(1,6)),type([['Person']],1),pos(7,15)),minus(identifier('Person',type([['Person']],1),pos(5,1)),join(identifier('Humans',type([['Humans']],1),pos(9,3)),identifier('men',type([['Humans', 'Person']],2),pos(1,5)),type([['Person']],1),pos(31,15)),type([['Person']],1),pos(23,15)),type([untyped],0),pos(14,15)), greater(card(join(identifier('Humans',type([['Humans']],1),pos(9,3)),identifier('husband',type([['Humans', 'Person', 'Person']],3),pos(1,9)),type([['Person', 'Person']],2),pos(9,20)),type([['Int']],1),pos(1,20)),integer(1,pos(20,20)),type([untyped],0),pos(18,20)), greater(card(join(identifier('Humans',type([['Humans']],1),pos(9,3)),identifier('wife',type([['Humans', 'Person', 'Person']],3),pos(1,10)),type([['Person', 'Person']],2),pos(9,21)),type([['Int']],1),pos(1,21)),integer(1,pos(16,21)),type([untyped],0),pos(14,21))],pos(1,15)),global_scope(10),exact_scopes([]),bitwidth(-1),pos(1,29))]),functions([predicate('show',[],[],boolean(true,pos(13,27)),pos(1,27))]),signatures([signature('Person',[],[],[],pos(5,1)),signature('Humans',[field('men',setof(identifier('Person',type([['Person']],1),pos(5,1)),type([['Person']],1),pos(7,5)),type([['Person']],1),[],pos(1,5)),field('women',setof(identifier('Person',type([['Person']],1),pos(5,1)),type([['Person']],1),pos(9,6)),type([['Person']],1),[],pos(1,6)),field('mother',partial_function(identifier('Person',type([['Person']],1),pos(5,1)),join(identifier(this,type([['Humans']],1),pos(1,1)),identifier('women',type([['Humans', 'Person']],2),pos(1,6)),type([['Person']],1),pos(25,7)),type([['Person', 'Person']],2),pos(17,7)),type([['Person', 'Person']],2),[],pos(1,7)),field('father',partial_function(identifier('Person',type([['Person']],1),pos(5,1)),join(identifier(this,type([['Humans']],1),pos(1,1)),identifier('men',type([['Humans', 'Person']],2),pos(1,5)),type([['Person']],1),pos(25,8)),type([['Person', 'Person']],2),pos(17,8)),type([['Person', 'Person']],2),[],pos(1,8)),field('husband',partial_injection(join(identifier(this,type([['Humans']],1),pos(1,1)),identifier('women',type([['Humans', 'Person']],2),pos(1,6)),type([['Person']],1),pos(11,9)),join(identifier(this,type([['Humans']],1),pos(1,1)),identifier('men',type([['Humans', 'Person']],2),pos(1,5)),type([['Person']],1),pos(30,9)),type([['Person', 'Person']],2),pos(17,9)),type([['Person', 'Person']],2),[],pos(1,9)),field('wife',partial_injection(join(identifier(this,type([['Humans']],1),pos(1,1)),identifier('men',type([['Humans', 'Person']],2),pos(1,5)),type([['Person']],1),pos(8,10)),join(identifier(this,type([['Humans']],1),pos(1,1)),identifier('women',type([['Humans', 'Person']],2),pos(1,6)),type([['Person']],1),pos(25,10)),type([['Person', 'Person']],2),pos(12,10)),type([['Person', 'Person']],2),[],pos(1,10))],[],[one],pos(9,3))])) ,
    translate_alloy_model(AlloyTerm,Translated) , 
    Translated == machine(generated(none,abstract_machine(none,machine(none),machine_header(none,alloytranslation,[]),[properties(none,conjunct(none,member(pos(0,0,5,1,0,0),identifier(none,men),relations(none,set_extension(none,[identifier(none,'Humans')]),identifier(pos(0,0,1,5,0,0),'Person'))),conjunct(none,member(pos(0,0,6,1,0,0),identifier(none,women),relations(none,set_extension(none,[identifier(none,'Humans')]),identifier(pos(0,0,1,5,0,0),'Person'))),conjunct(none,member(pos(0,0,7,1,0,0),identifier(none,mother),partial_function(pos(0,0,7,17,0,0),identifier(pos(0,0,1,5,0,0),'Person'),image(pos(0,0,7,25,0,0),identifier(pos(0,0,6,1,0,0),women),set_extension(pos(0,0,1,1,0,0),[identifier(none,'Humans')])))),conjunct(none,member(pos(0,0,8,1,0,0),identifier(none,father),partial_function(pos(0,0,8,17,0,0),identifier(pos(0,0,1,5,0,0),'Person'),image(pos(0,0,8,25,0,0),identifier(pos(0,0,5,1,0,0),men),set_extension(pos(0,0,1,1,0,0),[identifier(none,'Humans')])))),conjunct(none,member(pos(0,0,9,1,0,0),identifier(none,husband),partial_injection(pos(0,0,9,17,0,0),image(pos(0,0,9,11,0,0),identifier(pos(0,0,6,1,0,0),women),set_extension(pos(0,0,1,1,0,0),[identifier(none,'Humans')])),image(pos(0,0,9,30,0,0),identifier(pos(0,0,5,1,0,0),men),set_extension(pos(0,0,1,1,0,0),[identifier(none,'Humans')])))),conjunct(none,member(pos(0,0,10,1,0,0),identifier(none,wife),partial_injection(pos(0,0,10,12,0,0),image(pos(0,0,10,8,0,0),identifier(pos(0,0,5,1,0,0),men),set_extension(pos(0,0,1,1,0,0),[identifier(none,'Humans')])),image(pos(0,0,10,25,0,0),identifier(pos(0,0,6,1,0,0),women),set_extension(pos(0,0,1,1,0,0),[identifier(none,'Humans')])))),conjunct(none,greater(pos(0,0,21,14,0,0),card(pos(0,0,21,1,0,0),image(pos(0,0,21,9,0,0),identifier(pos(0,0,10,1,0,0),wife),set_extension(pos(0,0,3,9,0,0),[identifier(none,'Humans')]))),integer(pos(0,0,21,16,0,0),1)),conjunct(none,greater(pos(0,0,20,18,0,0),card(pos(0,0,20,1,0,0),image(pos(0,0,20,9,0,0),identifier(pos(0,0,9,1,0,0),husband),set_extension(pos(0,0,3,9,0,0),[identifier(none,'Humans')]))),integer(pos(0,0,20,20,0,0),1)),equal(pos(0,0,15,14,0,0),image(pos(0,0,15,7,0,0),identifier(pos(0,0,6,1,0,0),women),set_extension(pos(0,0,3,9,0,0),[identifier(none,'Humans')])),set_subtraction(pos(0,0,15,23,0,0),identifier(pos(0,0,1,5,0,0),'Person'),image(pos(0,0,15,31,0,0),identifier(pos(0,0,5,1,0,0),men),set_extension(pos(0,0,3,9,0,0),[identifier(none,'Humans')]))))))))))))),definitions(none,[predicate_definition(pos(0,0,27,1,0,0),show,[],boolean_true(pos(0,0,27,13,0,0)))]),operations(none,[operation(pos(0,0,29,1,0,0),identifier(pos(0,0,29,1,0,0),run0),[],[],precondition(pos(0,0,29,1,0,0),conjunct(pos(0,0,29,1,0,0),conjunct(none,truth(none),conjunct(none,less_equal(none,card(none,set_extension(none,[identifier(none,'Humans')])),integer(none,10)),less_equal(none,card(none,identifier(none,'Person')),integer(none,10)))),conjunct(none,greater(pos(0,0,21,14,0,0),card(pos(0,0,21,1,0,0),image(pos(0,0,21,9,0,0),identifier(pos(0,0,10,1,0,0),wife),set_extension(pos(0,0,3,9,0,0),[identifier(none,'Humans')]))),integer(pos(0,0,21,16,0,0),1)),conjunct(none,greater(pos(0,0,20,18,0,0),card(pos(0,0,20,1,0,0),image(pos(0,0,20,9,0,0),identifier(pos(0,0,9,1,0,0),husband),set_extension(pos(0,0,3,9,0,0),[identifier(none,'Humans')]))),integer(pos(0,0,20,20,0,0),1)),equal(pos(0,0,15,14,0,0),image(pos(0,0,15,7,0,0),identifier(pos(0,0,6,1,0,0),women),set_extension(pos(0,0,3,9,0,0),[identifier(none,'Humans')])),set_subtraction(pos(0,0,15,23,0,0),identifier(pos(0,0,1,5,0,0),'Person'),image(pos(0,0,15,31,0,0),identifier(pos(0,0,5,1,0,0),men),set_extension(pos(0,0,3,9,0,0),[identifier(none,'Humans')]))))))),skip(none)))]),constants(none,[identifier(none,wife),identifier(none,husband),identifier(none,father),identifier(none,mother),identifier(none,women),identifier(none,men)]),sets(none,[deferred_set(pos(0,0,3,9,0,0),'Humans'),deferred_set(pos(0,0,1,5,0,0),'Person')])]))).

:- end_tests(full_machine_translation).
